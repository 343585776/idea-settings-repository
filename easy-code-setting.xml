<application>
  <component name="EasyCodeSetting">
    <option name="author" value="sdevil507" />
    <option name="columnConfigGroupMap">
      <map>
        <entry key="Default">
          <value>
            <ColumnConfigGroup>
              <option name="elementList">
                <list>
                  <ColumnConfig>
                    <option name="title" value="paramsDisable" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                  <ColumnConfig>
                    <option name="title" value="searchDisable" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                  <ColumnConfig>
                    <option name="title" value="resultDisable" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                  <ColumnConfig>
                    <option name="title" value="lobType" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                </list>
              </option>
              <option name="name" value="Default" />
            </ColumnConfigGroup>
          </value>
        </entry>
        <entry key="sdevil507">
          <value>
            <ColumnConfigGroup>
              <option name="elementList">
                <list>
                  <ColumnConfig>
                    <option name="title" value="ParamsDisable" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                  <ColumnConfig>
                    <option name="title" value="SearchDisable" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                  <ColumnConfig>
                    <option name="title" value="ResultDisable" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                  <ColumnConfig>
                    <option name="title" value="Lob" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                </list>
              </option>
              <option name="name" value="sdevil507" />
            </ColumnConfigGroup>
          </value>
        </entry>
      </map>
    </option>
    <option name="currColumnConfigGroupName" value="sdevil507" />
    <option name="currGlobalConfigGroupName" value="sdevil507" />
    <option name="currTemplateGroupName" value="sdevil507-mp" />
    <option name="currTypeMapperGroupName" value="sdevil507-mp" />
    <option name="globalConfigGroupMap">
      <map>
        <entry key="Default">
          <value>
            <GlobalConfigGroup>
              <option name="elementList">
                <list>
                  <GlobalConfig>
                    <option name="name" value="init" />
                    <option name="value" value="##初始化区域&#10;&#10;##去掉表的t_前缀&#10;$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(&quot;book_&quot;,&quot;&quot;)))&#10;&#10;##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($column.name.startsWith(&quot;is&quot;) &amp;&amp; $column.type.equals(&quot;java.lang.Boolean&quot;))&#10;    $!column.setName($tool.firstLowerCase($column.name.substring(2)))&#10;#end&#10;#end&#10;&#10;##实现动态排除列&#10;#set($temp = $tool.newHashSet(&quot;testCreateTime&quot;, &quot;otherColumn&quot;))&#10;#foreach($item in $temp)&#10;    #set($newList = $tool.newArrayList())&#10;    #foreach($column in $tableInfo.fullColumn)&#10;        #if($column.name!=$item)&#10;            ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;            $tool.call($newList.add($column))&#10;        #end&#10;    #end&#10;    ##重新保存&#10;    $tableInfo.setFullColumn($newList)&#10;#end&#10;&#10;##对importList进行篡改&#10;#set($temp = $tool.newHashSet())&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.type.startsWith(&quot;java.lang.&quot;))&#10;        ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;        $tool.call($temp.add($column.type))&#10;    #end&#10;#end&#10;##覆盖&#10;#set($importList = $temp)" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="define" />
                    <option name="value" value="##（Velocity宏定义）&#10;&#10;##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(&quot;Test&quot;)&#10;#macro(setTableSuffix $suffix)&#10;    #set($tableName = $!tool.append($tableInfo.name, $suffix))&#10;#end&#10;&#10;##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(&quot;Test&quot;)&#10;#macro(setPackageSuffix $suffix)&#10;#if($suffix!=&quot;&quot;)package #end#if($tableInfo.savePackageName!=&quot;&quot;)$!{tableInfo.savePackageName}.#{end}$!suffix;&#10;#end&#10;&#10;##定义直接保存路径与文件名简化的宏定义，调用方式：#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;#macro(save $path $fileName)&#10;    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))&#10;    $!callback.setFileName($tool.append($tableInfo.name, $fileName))&#10;#end&#10;&#10;##定义表注释的宏定义，调用方式：#tableComment(&quot;注释信息&quot;)&#10;#macro(tableComment $desc)&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})$desc&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;#end&#10;&#10;##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)&#10;#macro(getSetMethod $column)&#10;&#10;    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {&#10;        return $!{column.name};&#10;    }&#10;&#10;    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {&#10;        this.$!{column.name} = $!{column.name};&#10;    }&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="autoImport" />
                    <option name="value" value="##自动导入包（仅导入实体属性需要的包，通常用于实体类）&#10;#foreach($import in $importList)&#10;import $!import;&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="mybatisSupport" />
                    <option name="value" value="##针对Mybatis 进行支持，主要用于生成xml文件&#10;#foreach($column in $tableInfo.fullColumn)&#10;    ##储存列类型&#10;    $tool.call($column.ext.put(&quot;sqlType&quot;, $tool.getField($column.obj.dataType, &quot;typeName&quot;)))&#10;    #if($tool.newHashSet(&quot;java.lang.String&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;VARCHAR&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Boolean&quot;, &quot;boolean&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;BOOLEAN&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Byte&quot;, &quot;byte&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;BYTE&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Integer&quot;, &quot;int&quot;, &quot;java.lang.Short&quot;, &quot;short&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;INTEGER&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Long&quot;, &quot;long&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;INTEGER&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Float&quot;, &quot;float&quot;, &quot;java.lang.Double&quot;, &quot;double&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;NUMERIC&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.util.Date&quot;, &quot;java.sql.Timestamp&quot;, &quot;java.time.Instant&quot;, &quot;java.time.LocalDateTime&quot;, &quot;java.time.OffsetDateTime&quot;, &quot;&#9;java.time.ZonedDateTime&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;TIMESTAMP&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.sql.Date&quot;, &quot;java.time.LocalDate&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;TIMESTAMP&quot;)&#10;    #else&#10;        ##其他类型&#10;        #set($jdbcType=&quot;OTHER&quot;)&#10;    #end&#10;    $tool.call($column.ext.put(&quot;jdbcType&quot;, $jdbcType))&#10;#end&#10;&#10;##定义宏，查询所有列&#10;#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end" />
                  </GlobalConfig>
                </list>
              </option>
              <option name="name" value="Default" />
            </GlobalConfigGroup>
          </value>
        </entry>
        <entry key="sdevil507">
          <value>
            <GlobalConfigGroup>
              <option name="elementList">
                <list>
                  <GlobalConfig>
                    <option name="name" value="init" />
                    <option name="value" value="##初始化区域&#10;&#10;##去掉表的t_前缀&#10;&#10;$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(&quot;biz_&quot;,&quot;&quot;)))&#10;&#10;##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if($column.name.startsWith(&quot;is&quot;) &amp;&amp; $column.type.equals(&quot;java.lang.Boolean&quot;))&#10;    $!column.setName($tool.firstLowerCase($column.name.substring(2)))&#10;#end&#10;#end&#10;&#10;##实现动态排除列&#10;#set($temp = $tool.newHashSet(&quot;testCreateTime&quot;, &quot;&quot;))&#10;#foreach($item in $temp)&#10;    #set($newList = $tool.newArrayList())&#10;    #foreach($column in $tableInfo.fullColumn)&#10;        #if($column.name!=$item)&#10;            ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;            $tool.call($newList.add($column))&#10;        #end&#10;    #end&#10;    ##重新保存&#10;    $tableInfo.setFullColumn($newList)&#10;#end&#10;&#10;##对importList进行篡改&#10;#set($temp = $tool.newHashSet())&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.type.startsWith(&quot;java.lang.&quot;))&#10;        ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;        $tool.call($temp.add($column.type))&#10;    #end&#10;#end&#10;##覆盖&#10;#set($importList = $temp)" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="define" />
                    <option name="value" value="##（Velocity宏定义）&#10;&#10;##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(&quot;Test&quot;)&#10;#macro(setTableSuffix $suffix)&#10;    #set($tableName = $!tool.append($tableInfo.name, $suffix))&#10;#end&#10;&#10;##[增加类名前缀]定义设置表名后缀的宏定义，调用方式：#setTableSuffix(&quot;Test&quot;)&#10;#macro(setTablePrefixSuffix $prefix $suffix)&#10;    #set($tableName = $!tool.append($tableInfo.name, $suffix))&#10;    #set($tableName = $!tool.append($prefix, $tableName))&#10;#end&#10;&#10;##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(&quot;Test&quot;)&#10;#macro(setPackageSuffix $suffix)&#10;#if($suffix!=&quot;&quot;)package #end#if($tableInfo.savePackageName!=&quot;&quot;)$!{tableInfo.savePackageName}.#{end}$!suffix;&#10;#end&#10;&#10;##定义直接保存路径与文件名简化的宏定义，调用方式：#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;#macro(save $path $fileName)&#10;    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))&#10;    $!callback.setFileName($tool.append($tableInfo.name, $fileName))&#10;#end&#10;&#10;##[增加类名前缀]定义直接保存路径与文件名简化的宏定义，调用方式：#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;#macro(saveWithPrefix $path $prefix $fileName)&#10;    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))&#10;    $!callback.setFileName($tool.append($!tool.append($prefix,$tableInfo.name), $fileName))&#10;#end&#10;&#10;##定义表注释的宏定义，调用方式：#tableComment(&quot;注释信息&quot;)&#10;#macro(tableComment $desc)&#10;/**&#10; * $!{tableInfo.comment}-$desc&#10; *&#10; * @author $!author&#10; * created on $!time.currTime()&#10; */&#10;#end&#10;&#10;##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)&#10;#macro(getSetMethod $column)&#10;&#10;    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {&#10;        return $!{column.name};&#10;    }&#10;&#10;    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {&#10;        this.$!{column.name} = $!{column.name};&#10;    }&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="autoImport" />
                    <option name="value" value="##自动导入包（仅导入实体属性需要的包，通常用于实体类）&#10;#foreach($import in $importList)&#10;import $!import;&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="removeTablePrefix" />
                    <option name="value" value="## 去除表前缀统一设置&#10;$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(&quot;biz_&quot;,&quot;&quot;)))" />
                  </GlobalConfig>
                </list>
              </option>
              <option name="name" value="sdevil507" />
            </GlobalConfigGroup>
          </value>
        </entry>
      </map>
    </option>
    <option name="templateGroupMap">
      <map>
        <entry key="Default">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import java.io.Serializable;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;实体类&quot;)&#10;public class $!{tableInfo.name} implements Serializable {&#10;    private static final long serialVersionUID = $!tool.serial();&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(${column.comment})/**&#10;    * ${column.comment}&#10;    */#end&#10;&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;##使用宏定义实现get,set方法&#10;#getSetMethod($column)&#10;#end&#10;&#10;}" />
                    <option name="name" value="entity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Dao&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dao&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import org.apache.ibatis.annotations.Param;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 查询指定行数据&#10;     *&#10;     * @param offset 查询起始位置&#10;     * @param limit 查询条数&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; queryAllByLimit(@Param(&quot;offset&quot;) int offset, @Param(&quot;limit&quot;) int limit);&#10;&#10;&#10;    /**&#10;     * 通过实体作为筛选条件查询&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; queryAll($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 影响行数&#10;     */&#10;    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 影响行数&#10;     */&#10;    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 影响行数&#10;     */&#10;    int deleteById($!pk.shortType $!pk.name);&#10;&#10;}" />
                    <option name="name" value="dao.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表服务接口&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 查询多条数据&#10;     *&#10;     * @param offset 查询起始位置&#10;     * @param limit 查询条数&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; queryAllByLimit(int offset, int limit);&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 是否成功&#10;     */&#10;    boolean deleteById($!pk.shortType $!pk.name);&#10;&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.stereotype.Service;&#10;&#10;import javax.annotation.Resource;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;@Service(&quot;$!tool.firstLowerCase($!{tableInfo.name})Service&quot;)&#10;public class $!{tableName} implements $!{tableInfo.name}Service {&#10;    @Resource&#10;    private $!{tableInfo.name}Dao $!tool.firstLowerCase($!{tableInfo.name})Dao;&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public $!{tableInfo.name} queryById($!pk.shortType $!pk.name) {&#10;        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryById($!pk.name);&#10;    }&#10;&#10;    /**&#10;     * 查询多条数据&#10;     *&#10;     * @param offset 查询起始位置&#10;     * @param limit 查询条数&#10;     * @return 对象列表&#10;     */&#10;    @Override&#10;    public List&lt;$!{tableInfo.name}&gt; queryAllByLimit(int offset, int limit) {&#10;        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryAllByLimit(offset, limit);&#10;    }&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.insert($!tool.firstLowerCase($!{tableInfo.name}));&#10;        return $!tool.firstLowerCase($!{tableInfo.name});&#10;    }&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.update($!tool.firstLowerCase($!{tableInfo.name}));&#10;        return this.queryById($!{tool.firstLowerCase($!{tableInfo.name})}.get$!tool.firstUpperCase($pk.name)());&#10;    }&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 是否成功&#10;     */&#10;    @Override&#10;    public boolean deleteById($!pk.shortType $!pk.name) {&#10;        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteById($!pk.name) &gt; 0;&#10;    }&#10;}" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import javax.annotation.Resource;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表控制层&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;@RestController&#10;@RequestMapping(&quot;$!tool.firstLowerCase($tableInfo.name)&quot;)&#10;public class $!{tableName} {&#10;    /**&#10;     * 服务对象&#10;     */&#10;    @Resource&#10;    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;&#10;&#10;    /**&#10;     * 通过主键查询单条数据&#10;     *&#10;     * @param id 主键&#10;     * @return 单条数据&#10;     */&#10;    @GetMapping(&quot;selectOne&quot;)&#10;    public $!{tableInfo.name} selectOne($!pk.shortType id) {&#10;        return this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryById(id);&#10;    }&#10;&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入mybatis支持&#10;$!mybatisSupport&#10;&#10;##设置保存名称与保存位置&#10;$!callback.setFileName($tool.append($!{tableInfo.name}, &quot;Dao.xml&quot;))&#10;$!callback.setSavePath($tool.append($modulePath, &quot;/src/main/resources/mapper&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&#10;&lt;mapper namespace=&quot;$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao&quot;&gt;&#10;&#10;    &lt;resultMap type=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot; id=&quot;$!{tableInfo.name}Map&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;        &lt;result property=&quot;$!column.name&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#end&#10;    &lt;/resultMap&gt;&#10;&#10;    &lt;!--查询单个--&gt;&#10;    &lt;select id=&quot;queryById&quot; resultMap=&quot;$!{tableInfo.name}Map&quot;&gt;&#10;        select&#10;          #allSqlColumn()&#10;&#10;        from $!{tableInfo.obj.parent.name}.$!tableInfo.obj.name&#10;        where $!pk.obj.name = #{$!pk.name}&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--查询指定行数据--&gt;&#10;    &lt;select id=&quot;queryAllByLimit&quot; resultMap=&quot;$!{tableInfo.name}Map&quot;&gt;&#10;        select&#10;          #allSqlColumn()&#10;&#10;        from $!{tableInfo.obj.parent.name}.$!tableInfo.obj.name&#10;        limit #{offset}, #{limit}&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--通过实体作为筛选条件查询--&gt;&#10;    &lt;select id=&quot;queryAll&quot; resultMap=&quot;$!{tableInfo.name}Map&quot;&gt;&#10;        select&#10;          #allSqlColumn()&#10;&#10;        from $!{tableInfo.obj.parent.name}.$!tableInfo.obj.name&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;$!column.name != null#if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;                and $!column.obj.name = #{$!column.name}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--新增所有列--&gt;&#10;    &lt;insert id=&quot;insert&quot; keyProperty=&quot;$!pk.name&quot; useGeneratedKeys=&quot;true&quot;&gt;&#10;        insert into $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)&#10;        values (#foreach($column in $tableInfo.otherColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)&#10;    &lt;/insert&gt;&#10;&#10;    &lt;!--通过主键修改数据--&gt;&#10;    &lt;update id=&quot;update&quot;&gt;&#10;        update $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name}&#10;        &lt;set&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;if test=&quot;$!column.name != null#if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;                $!column.obj.name = #{$!column.name},&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/set&gt;&#10;        where $!pk.obj.name = #{$!pk.name}&#10;    &lt;/update&gt;&#10;&#10;    &lt;!--通过主键删除--&gt;&#10;    &lt;delete id=&quot;deleteById&quot;&gt;&#10;        delete from $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name}&#10;    &lt;/delete&gt;&#10;&#10;&lt;/mapper&gt;" />
                    <option name="name" value="mapper.xml" />
                  </Template>
                  <Template>
                    <option name="code" value="//调试表原始对象&#10;$!tool.debug($tableInfo.obj)&#10;&#10;//调试列原始对象&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj)&#10;&#10;//调试列原始列类型&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)&#10;&#10;//获取原始列类型中的字段&#10;sqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, &quot;typeName&quot;)&#10;&#10;//执行原始列类型中的方法&#10;sqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()&#10;" />
                    <option name="name" value="debug.json" />
                  </Template>
                </list>
              </option>
              <option name="name" value="Default" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="MybatisPlus">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##自动导入包（全局变量）&#10;$!autoImport&#10;import com.baomidou.mybatisplus.extension.activerecord.Model;&#10;import java.io.Serializable;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表实体类&quot;)&#10;@SuppressWarnings(&quot;serial&quot;)&#10;public class $!{tableInfo.name} extends Model&lt;$!{tableInfo.name}&gt; {&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(${column.comment})//${column.comment}#end&#10;&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;#getSetMethod($column)&#10;#end&#10;&#10;#foreach($column in $tableInfo.pkColumn)&#10;    /**&#10;     * 获取主键值&#10;     *&#10;     * @return 主键值&#10;     */&#10;    @Override&#10;    protected Serializable pkVal() {&#10;        return this.$!column.name;&#10;    }&#10;    #break&#10;#end&#10;}" />
                    <option name="name" value="entity" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;Dao&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/dao&quot;, &quot;Dao.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;dao&quot;)&#10;&#10;import com.baomidou.mybatisplus.core.mapper.BaseMapper;&#10;import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表数据库访问层&quot;)&#10;public interface $!{tableName} extends BaseMapper&lt;$!tableInfo.name&gt; {&#10;&#10;}" />
                    <option name="name" value="dao" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;Service&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/service&quot;, &quot;Service.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;service&quot;)&#10;&#10;import com.baomidou.mybatisplus.extension.service.IService;&#10;import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表服务接口&quot;)&#10;public interface $!{tableName} extends IService&lt;$!tableInfo.name&gt; {&#10;&#10;}" />
                    <option name="name" value="service" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;ServiceImpl&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/service/impl&quot;, &quot;ServiceImpl.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;service.impl&quot;)&#10;&#10;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;&#10;import $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.stereotype.Service;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表服务实现类&quot;)&#10;@Service(&quot;$!tool.firstLowerCase($tableInfo.name)Service&quot;)&#10;public class $!{tableName} extends ServiceImpl&lt;$!{tableInfo.name}Dao, $!{tableInfo.name}&gt; implements $!{tableInfo.name}Service {&#10;&#10;}" />
                    <option name="name" value="serviceImpl" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;Controller&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/controller&quot;, &quot;Controller.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;controller&quot;)&#10;&#10;##定义服务名&#10;#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), &quot;Service&quot;))&#10;&#10;##定义实体对象名&#10;#set($entityName = $!tool.firstLowerCase($!tableInfo.name))&#10;&#10;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;&#10;import com.baomidou.mybatisplus.extension.api.ApiController;&#10;import com.baomidou.mybatisplus.extension.api.R;&#10;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;&#10;import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import javax.annotation.Resource;&#10;import java.io.Serializable;&#10;import java.util.List;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表控制层&quot;)&#10;@RestController&#10;@RequestMapping(&quot;$!tool.firstLowerCase($!tableInfo.name)&quot;)&#10;public class $!{tableName} extends ApiController {&#10;    /**&#10;     * 服务对象&#10;     */&#10;    @Resource&#10;    private $!{tableInfo.name}Service $!{serviceName};&#10;&#10;    /**&#10;     * 分页查询所有数据&#10;     *&#10;     * @param page 分页对象&#10;     * @param $!entityName 查询实体&#10;     * @return 所有数据&#10;     */&#10;    @GetMapping&#10;    public R selectAll(Page&lt;$!tableInfo.name&gt; page, $!tableInfo.name $!entityName) {&#10;        return success(this.$!{serviceName}.page(page, new QueryWrapper&lt;&gt;($!entityName)));&#10;    }&#10;&#10;    /**&#10;     * 通过主键查询单条数据&#10;     *&#10;     * @param id 主键&#10;     * @return 单条数据&#10;     */&#10;    @GetMapping(&quot;{id}&quot;)&#10;    public R selectOne(@PathVariable Serializable id) {&#10;        return success(this.$!{serviceName}.getById(id));&#10;    }&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!entityName 实体对象&#10;     * @return 新增结果&#10;     */&#10;    @PostMapping&#10;    public R insert(@RequestBody $!tableInfo.name $!entityName) {&#10;        return success(this.$!{serviceName}.save($!entityName));&#10;    }&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!entityName 实体对象&#10;     * @return 修改结果&#10;     */&#10;    @PutMapping&#10;    public R update(@RequestBody $!tableInfo.name $!entityName) {&#10;        return success(this.$!{serviceName}.updateById($!entityName));&#10;    }&#10;&#10;    /**&#10;     * 删除数据&#10;     *&#10;     * @param idList 主键结合&#10;     * @return 删除结果&#10;     */&#10;    @DeleteMapping&#10;    public R delete(@RequestParam(&quot;idList&quot;) List&lt;Long&gt; idList) {&#10;        return success(this.$!{serviceName}.removeByIds(idList));&#10;    }&#10;}" />
                    <option name="name" value="controller" />
                  </Template>
                </list>
              </option>
              <option name="name" value="MybatisPlus" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="sdevil507">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##引入宏定义&#10;$!define&#10;&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;#set($serviceName=$tool.append($!tool.firstLowerCase($!{tableInfo.name}),'Service'))&#10;#set($mapperName=$tool.append($!tool.firstLowerCase($!{tableInfo.name}),'Mapper'))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}Po;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ResultDto;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ParamsDto;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import me.sdevil507.supports.jpa.*;&#10;import me.sdevil507.supports.result.ApiResultDTO;&#10;import me.sdevil507.supports.result.ApiResultGenerator;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;Controller&quot;)&#10;@Controller&#10;@RequestMapping(&quot;&quot;)&#10;@Slf4j&#10;public class $!{tableName} {&#10;&#10;    @Autowired&#10;    private $!{tableInfo.name}Service $!{serviceName};&#10;&#10;    @Autowired&#10;    private $!{tableInfo.name}Mapper $!{mapperName};&#10;&#10;    /**&#10;     * 获取全部信息列表&#10;     *&#10;     * @param dto 聚合查询/分页/排序参数&#10;     * @return 信息列表&#10;     */&#10;    @RequestMapping(value = &quot;/readAll&quot;, method = RequestMethod.GET)&#10;    @ResponseBody&#10;    public ApiResultDTO readAll(@RequestBody $!{tableInfo.name}MergeParamsDto dto) {&#10;        List&lt;$!{tableInfo.name}ResultDto&gt; list = $!{mapperName}.pos2dtos($!{serviceName}.readAll(dto.getSearchDto(), dto.getSortParamsDto()));&#10;        return ApiResultGenerator.create(ApiStatusCode.SUCCESS.getCode(), ApiStatusCode.SUCCESS.getDescription(), list);&#10;    }&#10;&#10;    /**&#10;     * 分页获取信息列表&#10;     *&#10;     * @param dto 聚合查询/分页/排序参数&#10;     * @return 分页数据&#10;     */&#10;    @SuppressWarnings(&quot;Convert2Lambda&quot;)&#10;    @RequestMapping(value = &quot;/readAllByPage&quot;, method = RequestMethod.GET)&#10;    @ResponseBody&#10;    public ApiResultDTO readAllByPage(@RequestBody $!{tableInfo.name}MergeParamsDto dto) {&#10;        Page&lt;$!{tableInfo.name}Po&gt; pagePos = $!{serviceName}.readAllByPage(dto.getSearchDto(), dto.getPageParamsDto(), dto.getSortParamsDto());&#10;        PageResultDTO&lt;$!{tableInfo.name}ResultDto&gt; pageResultDto = PageResultGenerator.convert(pagePos, new PageConvertCallBack&lt;$!{tableInfo.name}ResultDto, $!{tableInfo.name}Po&gt;() {&#10;            @Override&#10;            public List&lt;$!{tableInfo.name}ResultDto&gt; exec(List&lt;$!{tableInfo.name}Po&gt; list) {&#10;                return $!{mapperName}.pos2dtos(list);&#10;            }&#10;        });&#10;        return ApiResultGenerator.create(ApiStatusCode.SUCCESS.getCode(), ApiStatusCode.SUCCESS.getDescription(), pageResultDto);&#10;    }&#10;&#10;    /**&#10;     * 创建&#10;     *&#10;     * @param dto 传输类&#10;     * @return 执行反馈&#10;     */&#10;    @RequestMapping(value = &quot;/create&quot;, method = RequestMethod.POST)&#10;    @ResponseBody&#10;    public ApiResultDTO create($!{tableInfo.name}ParamsDto dto) {&#10;        $!{serviceName}.create(dto);&#10;        return ApiResultGenerator.create(ApiStatusCode.SUCCESS.getCode(), ApiStatusCode.SUCCESS.getDescription());&#10;    }&#10;&#10;    /**&#10;     * 更新&#10;     *&#10;     * @param dto 传输类&#10;     * @return 执行反馈&#10;     */&#10;    @RequestMapping(value = &quot;/update&quot;, method = RequestMethod.POST)&#10;    @ResponseBody&#10;    public ApiResultDTO update($!{tableInfo.name}ParamsDto dto) {&#10;        $!{serviceName}.update(dto);&#10;        return ApiResultGenerator.create(ApiStatusCode.SUCCESS.getCode(), ApiStatusCode.SUCCESS.getDescription());&#10;    }&#10;&#10;    /**&#10;     * 删除&#10;     *&#10;     * @param dto 传输类&#10;     * @return 执行反馈&#10;     */&#10;    @RequestMapping(value = &quot;/delete&quot;, method = RequestMethod.POST)&#10;    @ResponseBody&#10;    public ApiResultDTO delete($!{tableInfo.name}ParamsDto dto) {&#10;        $!{serviceName}.delete(dto);&#10;        return ApiResultGenerator.create(ApiStatusCode.SUCCESS.getCode(), ApiStatusCode.SUCCESS.getDescription());&#10;    }&#10;}" />
                    <option name="name" value="Controller" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##引入宏定义&#10;$!define&#10;&#10;##定义类名&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ParamsDto&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;dto&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;&#10;import lombok.*;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;ParamsDto&quot;)&#10;@Data&#10;public class $!{tableInfo.name}ParamsDto {&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.ext.paramsFieldDisable)&#10;        #if(${column.comment})&#10;&#10;    /**&#10;     * ${column.comment}&#10;     */#end&#10;&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;#end&#10;&#10;}" />
                    <option name="name" value="ParamsDto" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##引入宏定义&#10;$!define&#10;&#10;##定义类名&#10;#set($tableName = $tool.append($tableInfo.name, &quot;MergeParamsDto&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;dto&quot;)&#10;&#10;import lombok.*;&#10;import me.sdevil507.supports.jpa.PageParamsDTO;&#10;import me.sdevil507.supports.jpa.SortParamsDTO;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;MergeParamsDto&quot;)&#10;@Data&#10;public class $!{tableInfo.name}MergeParamsDto {&#10;    &#10;    /**&#10;     * 查询参数&#10;     */&#10;    private $!{tableInfo.name}ParamsDto searchDto = new $!{tableInfo.name}ParamsDto();&#10;    &#10;    /**&#10;     * 分页参数&#10;     */&#10;    private PageParamsDTO pageParamsDto = new PageParamsDTO();&#10;    &#10;    /**&#10;     * 排序参数&#10;     */&#10;    private SortParamsDTO sortParamsDto = new SortParamsDTO();&#10;&#10;}" />
                    <option name="name" value="MergeParamsDto" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##引入宏定义&#10;$!define&#10;&#10;##定义类名&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ResultDto&quot;))&#10;&#10;##设置回调&#10;##保存文件名&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;##保存路径&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;dto&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;&#10;import lombok.*;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;ResultDto&quot;)&#10;@Data&#10;public class $!{tableInfo.name}ResultDto {&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.ext.resultDisable)&#10;        #if(${column.comment})&#10;&#10;    /**&#10;     * ${column.comment}&#10;     */#end&#10;&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;#end&#10;&#10;}" />
                    <option name="name" value="ResultDto" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##引入宏定义&#10;$!define&#10;&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Mapper&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapper&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;&#10;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ParamsDto;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ResultDto;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}Po;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.MappingTarget;&#10;import org.springframework.stereotype.Component;&#10;import org.mapstruct.NullValuePropertyMappingStrategy;&#10;&#10;import java.util.List;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;Mapper&quot;)&#10;@Component&#10;@Mapper(componentModel = &quot;spring&quot;, nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * po =&gt; dto&#10;     *&#10;     * @param po 实体类&#10;     * @return dto传输类&#10;     */&#10;    $!{tableInfo.name}ResultDto po2dto($!{tableInfo.name}Po po);&#10;&#10;    /**&#10;     * pos =&gt; dtos&#10;     *&#10;     * @param pos 实体类集合&#10;     * @return dtos传输类集合&#10;     */&#10;    List&lt;$!{tableInfo.name}ResultDto&gt; pos2dtos(List&lt;$!{tableInfo.name}Po&gt; pos);&#10;&#10;    /**&#10;     * dto =&gt; po&#10;     *&#10;     * @param dto 传输类&#10;     * @return po实体类&#10;     */&#10;    $!{tableInfo.name}Po dto2po($!{tableInfo.name}ParamsDto dto);&#10;&#10;    /**&#10;     * dtos =&gt; pos&#10;     *&#10;     * @param dtos 传输类集合&#10;     * @return pos实体类集合&#10;     */&#10;    List&lt;$!{tableInfo.name}Po&gt; dtos2pos(List&lt;$!{tableInfo.name}ParamsDto&gt; dtos);&#10;&#10;    /**&#10;     * 使用dto更新po&#10;     *&#10;     * @param dto 传输类&#10;     * @param po  实体类&#10;     */&#10;    void updatePoFromDto($!{tableInfo.name}ParamsDto dto, @MappingTarget $!{tableInfo.name}Po po);&#10;}" />
                    <option name="name" value="Mapper" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##引入宏定义&#10;$!define&#10;&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}Po;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ParamsDto;&#10;import org.springframework.data.domain.Page;&#10;import me.sdevil507.supports.jpa.SortParamsDTO;&#10;import me.sdevil507.supports.jpa.PageParamsDTO;&#10;&#10;import java.util.List;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;Service&quot;)&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 查询全部记录&#10;     * @param searchParamsDto 搜索DTO&#10;     * @param sortParamsDto 排序DTO&#10;     * @return 记录列表&#10;     */&#10;    List&lt;$!{tableInfo.name}Po&gt; readAll($!{tableInfo.name}ParamsDto searchParamsDto, SortParamsDTO sortParamsDto);&#10;&#10;    /**&#10;     * 分页获取记录&#10;     *&#10;     * @param searchParamsDto 查询DTO&#10;     * @param pageParamsDto 分页DTO&#10;     * @param sortParamsDto 排序DTO&#10;     * @return 分页记录&#10;     */&#10;    Page&lt;$!{tableInfo.name}Po&gt; readAllByPage($!{tableInfo.name}ParamsDto searchParamsDto, PageParamsDTO pageParamsDto, SortParamsDTO sortParamsDto);&#10;&#10;    /**&#10;     * 创建记录&#10;     *&#10;     * @param dto 传输类&#10;     */&#10;    void create($!{tableInfo.name}ParamsDto dto);&#10;&#10;    /**&#10;     * 更新记录&#10;     *&#10;     * @param dto 传输类&#10;     */&#10;    void update($!{tableInfo.name}ParamsDto dto);&#10;&#10;    /**&#10;     * 删除记录&#10;     *&#10;     * @param dto 传输类&#10;     */&#10;    void delete($!{tableInfo.name}ParamsDto dto);&#10;}" />
                    <option name="name" value="Service" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##引入宏定义&#10;$!define&#10;&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;#set($repositoryName=$tool.append($!tool.firstLowerCase($!{tableInfo.name}),'Repository'))&#10;#set($mapperName=$tool.append($!tool.firstLowerCase($!{tableInfo.name}),'Mapper'))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}Po;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ParamsDto;&#10;import $!{tableInfo.savePackageName}.repository.$!{tableInfo.name}Repository;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import me.sdevil507.supports.jpa.PageParamsDTO;&#10;import com.querydsl.core.types.Predicate;&#10;import $!{tableInfo.savePackageName}.po.Q$!{tableInfo.name}Po;&#10;import me.sdevil507.supports.jpa.SortParamsDTO;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;&#10;import org.springframework.stereotype.Service;&#10;import com.google.common.collect.Lists;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.data.domain.Pageable;&#10;&#10;import javax.annotation.Resource;&#10;import java.util.List;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;ServiceImpl&quot;)&#10;@Service&#10;public class $!{tableName} implements $!{tableInfo.name}Service {&#10;&#10;    @Resource&#10;    private $!{tableInfo.name}Repository $!{repositoryName};&#10;&#10;    @Autowired&#10;    private $!{tableInfo.name}Mapper $!{mapperName};&#10;&#10;    @Override&#10;    public List&lt;$!{tableInfo.name}Po&gt; readAll($!{tableInfo.name}ParamsDto searchParamsDto, SortParamsDTO sortParamsDto){&#10;        Q$!{tableInfo.name}Po q$!{tableInfo.name}Po = Q$!{tableInfo.name}Po.$!tool.firstLowerCase($!{tableInfo.name})Po;&#10;&#10;        // 开启谓语查询条件&#10;        Predicate predicate = q$!{tableInfo.name}Po.id.isNotNull();&#10;&#10;        // TODO&#10;        // 进行搜索条件的选取加入&#10;        // demo:&#10;        // String name=searchParamsDto.getName();&#10;        // if(!StringUtils.isEmpty(name)){&#10;        //     predicate = ExpressionUtils.and(predicate, q$!{tableInfo.name}Po.name.like(&quot;%&quot; + name + &quot;%&quot;));&#10;        // }&#10;&#10;        // 排序&#10;        Sort sort = sortParamsDto.getSort();&#10;        if (null == sort) {&#10;            // TODO&#10;            // 如果未给定初始排序顺序，则自行增加&#10;            // demo:&#10;            // sort = Sort.by(new Sort.Order(Sort.Direction.DESC, &quot;createdDate&quot;));&#10;        }&#10;&#10;        // 执行Iterable转换List&#10;        List&lt;$!{tableInfo.name}Po&gt; list = Lists.newArrayList($!{repositoryName}.findAll(predicate, sort).iterator());&#10;        return list;&#10;    }&#10;&#10;    @Override&#10;    public Page&lt;$!{tableInfo.name}Po&gt; readAllByPage($!{tableInfo.name}ParamsDto searchParamsDto, PageParamsDTO pageParamsDto, SortParamsDTO sortParamsDto){&#10;        Q$!{tableInfo.name}Po q$!{tableInfo.name}Po = Q$!{tableInfo.name}Po.$!tool.firstLowerCase($!{tableInfo.name})Po;&#10;&#10;        // 开启谓语查询条件&#10;        Predicate predicate = q$!{tableInfo.name}Po.id.isNotNull();&#10;&#10;        // TODO&#10;        // 进行搜索条件的选取加入&#10;        // demo:&#10;        // String name=searchParamsDto.getName();&#10;        // if(!StringUtils.isEmpty(name)){&#10;        //     predicate = ExpressionUtils.and(predicate, q$!{tableInfo.name}Po.name.like(&quot;%&quot; + name + &quot;%&quot;));&#10;        // }&#10;&#10;        // 排序&#10;        Sort sort = sortParamsDto.getSort();&#10;        if (null == sort) {&#10;            // TODO&#10;            // 如果未给定初始排序顺序，则自行增加&#10;            // demo:&#10;            // sort = Sort.by(new Sort.Order(Sort.Direction.DESC, &quot;createdDate&quot;));&#10;        }&#10;&#10;        // 执行返回&#10;        Pageable pageable = pageParamsDto.getPageableWithSort(sort);&#10;        return $!{repositoryName}.findAll(predicate, pageable);&#10;    }&#10;&#10;    @Override&#10;    public void create($!{tableInfo.name}ParamsDto dto) {&#10;        $!{repositoryName}.save($!{mapperName}.dto2po(dto));&#10;    }&#10;&#10;    @Override&#10;    public void update($!{tableInfo.name}ParamsDto dto) {&#10;        $!{tableInfo.name}Po po = $!{repositoryName}.findById(dto.getId()).orElse(null);&#10;        if (null !=po) {&#10;            $!{mapperName}.updatePoFromDto(dto, po);&#10;            $!{repositoryName}.save(po);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void delete($!{tableInfo.name}ParamsDto dto) {&#10;        $!{repositoryName}.deleteById(dto.getId());&#10;    }&#10;&#10;}" />
                    <option name="name" value="ServiceImpl" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##引入宏定义&#10;$!define&#10;&#10;##定义类名&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Po&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/po&quot;))&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;po&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;&#10;import lombok.*;&#10;import me.sdevil507.supports.jpa.BaseJpaSnowflakeIdEntity;&#10;&#10;import javax.persistence.*;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;Po&quot;)&#10;@Entity&#10;@Table(name = &quot;$!tableInfo.obj.name&quot;)&#10;@Data&#10;@EqualsAndHashCode(callSuper = true)&#10;public class $!{tableInfo.name}Po extends BaseJpaSnowflakeIdEntity {&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$tableInfo.pkColumn.get(0).name.equals($column.name))&#10;        #if(${column.comment})&#10;&#10;    /**&#10;     * ${column.comment}&#10;     */#end&#10;&#10;    @Column&#10;#if($column.ext.Lob)&#10;    @Lob&#10;#end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;#end&#10;&#10;}" />
                    <option name="name" value="Po" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##引入宏定义&#10;$!define&#10;&#10;##定义类名&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Po&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/po&quot;))&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;po&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;&#10;import lombok.*;&#10;import me.sdevil507.supports.jpa.BaseJpaSnowflakeIdAndAuditEntity;&#10;&#10;import javax.persistence.*;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;Po&quot;)&#10;@Entity&#10;@Table(name = &quot;$!tableInfo.obj.name&quot;)&#10;@Data&#10;@EqualsAndHashCode(callSuper = true)&#10;public class $!{tableInfo.name}Po extends BaseJpaSnowflakeIdAndAuditEntity {&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$tableInfo.pkColumn.get(0).name.equals($column.name)&amp;&amp;!$column.name.equals(&quot;createdBy&quot;)&amp;&amp;!$column.name.equals(&quot;createdDate&quot;)&amp;&amp;!$column.name.equals(&quot;lastModifiedBy&quot;)&amp;&amp;!$column.name.equals(&quot;lastModifiedDate&quot;))&#10;        #if(${column.comment})&#10;&#10;    /**&#10;     * ${column.comment}&#10;     */#end&#10;&#10;    @Column&#10;#if($column.ext.LobType)&#10;    @Lob&#10;#end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;#end&#10;&#10;}" />
                    <option name="name" value="AuditPo" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##引入宏定义&#10;$!define&#10;&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Repository&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/repository&quot;))&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;repository&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;import me.sdevil507.supports.jpa.BaseJpaDslRepository;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}Po;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;Repository&quot;)&#10;public interface $!{tableName} extends BaseJpaDslRepository&lt;$!{tableInfo.name}Po, $!{pk.shortType}&gt; {&#10;&#10;}" />
                    <option name="name" value="Repository" />
                  </Template>
                  <Template>
                    <option name="code" value="//调试表原始对象&#10;$!tool.debug($tableInfo.obj)&#10;&#10;//调试列原始对象&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj)&#10;&#10;//调试列原始列类型&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)&#10;&#10;//获取原始列类型中的字段&#10;sqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, &quot;typeName&quot;)&#10;&#10;//执行原始列类型中的方法&#10;sqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()&#10;" />
                    <option name="name" value="debug.json" />
                  </Template>
                </list>
              </option>
              <option name="name" value="sdevil507" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="sdevil507-mp">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/entity&quot;, &quot;Entity.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##自动导入包（全局变量）&#10;$!autoImport&#10;import lombok.*;&#10;import com.baomidou.mybatisplus.annotation.*;&#10;import com.yama.support.mybatis.auditor.entity.AuditedEntity;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;Entity&quot;)&#10;@TableName(value = &quot;$!{tableInfo.obj.name.toUpperCase()}&quot;, autoResultMap = true)&#10;@Data&#10;@EqualsAndHashCode(callSuper = false)&#10;@ToString&#10;public class $!{tableInfo.name}Entity extends AuditedEntity {&#10;#foreach($column in $tableInfo.fullColumn)&#10;&#10;#if(${column.comment})       /**&#10;        * ${column.comment}&#10;        */#end&#10;        &#10;#if($tableInfo.pkColumn.size()&gt;0&amp;&amp;$tableInfo.pkColumn.get(0).name.equals($column.name))       @TableId&#10;#end&#10;       private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;}" />
                    <option name="name" value="entityAudit" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/entity&quot;, &quot;Entity.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##自动导入包（全局变量）&#10;$!autoImport&#10;import lombok.*;&#10;import com.baomidou.mybatisplus.annotation.*;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;Entity&quot;)&#10;@TableName(value = &quot;$!{tableInfo.obj.name.toUpperCase()}&quot;, autoResultMap = true)&#10;@Data&#10;@EqualsAndHashCode&#10;@ToString&#10;public class $!{tableInfo.name}Entity {&#10;#foreach($column in $tableInfo.fullColumn)&#10;&#10;#if(${column.comment})       /**&#10;        * ${column.comment}&#10;        */#end&#10;        &#10;#if($tableInfo.pkColumn.size()&gt;0&amp;&amp;$tableInfo.pkColumn.get(0).name.equals($column.name))       @TableId&#10;#end&#10;       private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;}" />
                    <option name="name" value="entity" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;Dao&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/dao&quot;, &quot;Dao.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;dao&quot;)&#10;&#10;import com.baomidou.mybatisplus.core.mapper.BaseMapper;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name}Entity;&#10;import org.apache.ibatis.annotations.Mapper;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;Dao&quot;)&#10;@Mapper&#10;public interface $!{tableName} extends BaseMapper&lt;$!{tableInfo.name}Entity&gt; {&#10;&#10;}" />
                    <option name="name" value="dao" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##设置表后缀（宏定义）&#10;#setTablePrefixSuffix(&quot;I&quot;,&quot;Service&quot;)&#10;&#10;##保存文件（宏定义）&#10;#saveWithPrefix(&quot;/service&quot;,&quot;I&quot;, &quot;Service.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;service&quot;)&#10;&#10;import com.baomidou.mybatisplus.extension.service.IService;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name}Entity;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;Service&quot;)&#10;public interface $!{tableName} extends IService&lt;$!{tableInfo.name}Entity&gt; {&#10;&#10;}" />
                    <option name="name" value="service" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##设置表后缀（宏定义）&#10;#setTablePrefixSuffix(&quot;I&quot;,&quot;ServiceImpl&quot;)&#10;&#10;##保存文件（宏定义）&#10;#saveWithPrefix(&quot;/service/impl&quot;,&quot;I&quot;, &quot;ServiceImpl.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;service.impl&quot;)&#10;&#10;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;&#10;import $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name}Entity;&#10;import $!{tableInfo.savePackageName}.service.I$!{tableInfo.name}Service;&#10;import org.springframework.stereotype.Service;&#10;import lombok.AllArgsConstructor;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;ServiceImpl&quot;)&#10;@Service&#10;@AllArgsConstructor&#10;public class $!{tableName} extends ServiceImpl&lt;$!{tableInfo.name}Dao, $!{tableInfo.name}Entity&gt; implements I$!{tableInfo.name}Service {&#10;&#10;}" />
                    <option name="name" value="serviceImpl" />
                  </Template>
                  <Template>
                    <option name="code" value="##导入宏定义&#10;$!define&#10;&#10;##设置表后缀（宏定义）&#10;#setTableSuffix(&quot;Controller&quot;)&#10;&#10;##保存文件（宏定义）&#10;#save(&quot;/controller&quot;, &quot;Controller.java&quot;)&#10;&#10;##包路径（宏定义）&#10;#setPackageSuffix(&quot;controller&quot;)&#10;&#10;##定义服务名&#10;#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), &quot;Service&quot;))&#10;&#10;##定义实体对象名&#10;#set($entityName = $!tool.firstLowerCase($!tableInfo.name))&#10;&#10;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;&#10;import com.baomidou.mybatisplus.extension.api.ApiController;&#10;import com.baomidou.mybatisplus.extension.api.R;&#10;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;&#10;import $!{tableInfo.savePackageName}.entity.$!tableInfo.name;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import javax.annotation.Resource;&#10;import java.io.Serializable;&#10;import java.util.List;&#10;&#10;##表注释（宏定义）&#10;#tableComment(&quot;表控制层&quot;)&#10;@RestController&#10;@RequestMapping(&quot;$!tool.firstLowerCase($!tableInfo.name)&quot;)&#10;public class $!{tableName} extends ApiController {&#10;    /**&#10;     * 服务对象&#10;     */&#10;    @Resource&#10;    private $!{tableInfo.name}Service $!{serviceName};&#10;&#10;    /**&#10;     * 分页查询所有数据&#10;     *&#10;     * @param page 分页对象&#10;     * @param $!entityName 查询实体&#10;     * @return 所有数据&#10;     */&#10;    @GetMapping&#10;    public R selectAll(Page&lt;$!tableInfo.name&gt; page, $!tableInfo.name $!entityName) {&#10;        return success(this.$!{serviceName}.page(page, new QueryWrapper&lt;&gt;($!entityName)));&#10;    }&#10;&#10;    /**&#10;     * 通过主键查询单条数据&#10;     *&#10;     * @param id 主键&#10;     * @return 单条数据&#10;     */&#10;    @GetMapping(&quot;{id}&quot;)&#10;    public R selectOne(@PathVariable Serializable id) {&#10;        return success(this.$!{serviceName}.getById(id));&#10;    }&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!entityName 实体对象&#10;     * @return 新增结果&#10;     */&#10;    @PostMapping&#10;    public R insert(@RequestBody $!tableInfo.name $!entityName) {&#10;        return success(this.$!{serviceName}.save($!entityName));&#10;    }&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!entityName 实体对象&#10;     * @return 修改结果&#10;     */&#10;    @PutMapping&#10;    public R update(@RequestBody $!tableInfo.name $!entityName) {&#10;        return success(this.$!{serviceName}.updateById($!entityName));&#10;    }&#10;&#10;    /**&#10;     * 删除数据&#10;     *&#10;     * @param idList 主键结合&#10;     * @return 删除结果&#10;     */&#10;    @DeleteMapping&#10;    public R delete(@RequestParam(&quot;idList&quot;) List&lt;Long&gt; idList) {&#10;        return success(this.$!{serviceName}.removeByIds(idList));&#10;    }&#10;}" />
                    <option name="name" value="controller" />
                  </Template>
                </list>
              </option>
              <option name="name" value="sdevil507-mp" />
            </TemplateGroup>
          </value>
        </entry>
      </map>
    </option>
    <option name="typeMapperGroupMap">
      <map>
        <entry key="Default">
          <value>
            <TypeMapperGroup>
              <option name="elementList">
                <list>
                  <TypeMapper>
                    <option name="columnType" value="varchar(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="char(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="text" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Double" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+,\d+\))?" />
                    <option name="javaType" value="java.lang.Double" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="integer" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int4" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int8" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="bigint(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="datetime" />
                    <option name="javaType" value="java.util.Date" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="timestamp" />
                    <option name="javaType" value="java.util.Date" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="boolean" />
                    <option name="javaType" value="java.lang.Boolean" />
                  </TypeMapper>
                </list>
              </option>
              <option name="name" value="Default" />
            </TypeMapperGroup>
          </value>
        </entry>
        <entry key="sdevil507">
          <value>
            <TypeMapperGroup>
              <option name="elementList">
                <list>
                  <TypeMapper>
                    <option name="columnType" value="varchar(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="char(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="text" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Double" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+,\d+\))?" />
                    <option name="javaType" value="java.lang.Double" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="integer" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int4" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int8" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="bigint(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="datetime(\(\d+\))?" />
                    <option name="javaType" value="java.util.Date" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="timestamp" />
                    <option name="javaType" value="java.util.Date" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="boolean" />
                    <option name="javaType" value="java.lang.Boolean" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="bit(\(1\))?" />
                    <option name="javaType" value="java.lang.Boolean" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="tinyint(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                </list>
              </option>
              <option name="name" value="sdevil507" />
            </TypeMapperGroup>
          </value>
        </entry>
        <entry key="sdevil507-mp">
          <value>
            <TypeMapperGroup>
              <option name="elementList">
                <list>
                  <TypeMapper>
                    <option name="columnType" value="varchar(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="char(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="text" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Double" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+,\d+\))?" />
                    <option name="javaType" value="java.lang.Double" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="integer" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int4" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int8" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="bigint(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="datetime(\(\d+\))?" />
                    <option name="javaType" value="java.time.LocalDateTime" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="timestamp" />
                    <option name="javaType" value="java.util.Date" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="boolean" />
                    <option name="javaType" value="java.lang.Boolean" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="bit(\(1\))?" />
                    <option name="javaType" value="java.lang.Boolean" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="tinyint(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Boolean" />
                  </TypeMapper>
                </list>
              </option>
              <option name="name" value="sdevil507-mp" />
            </TypeMapperGroup>
          </value>
        </entry>
      </map>
    </option>
  </component>
</application>