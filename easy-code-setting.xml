<application>
  <component name="EasyCodeSetting">
    <option name="author" value="sdevil507" />
    <option name="columnConfigGroupMap">
      <map>
        <entry key="Default">
          <value>
            <ColumnConfigGroup>
              <option name="elementList">
                <list>
                  <ColumnConfig>
                    <option name="title" value="paramsFieldDisable" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                  <ColumnConfig>
                    <option name="title" value="searchFieldDisable" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                  <ColumnConfig>
                    <option name="title" value="resultFieldDisable" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                  <ColumnConfig>
                    <option name="title" value="LobType" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                </list>
              </option>
              <option name="name" value="Default" />
            </ColumnConfigGroup>
          </value>
        </entry>
      </map>
    </option>
    <option name="globalConfigGroupMap">
      <map>
        <entry key="Default">
          <value>
            <GlobalConfigGroup>
              <option name="elementList">
                <list>
                  <GlobalConfig>
                    <option name="name" value="init" />
                    <option name="value" value="##初始化区域&#10;&#10;##去掉表的t_前缀&#10;#if($tableInfo.obj.name.startsWith(&quot;t_&quot;))&#10;    $!tableInfo.setName($tool.getClassName($tableInfo.obj.name.substring(2)))&#10;#end&#10;&#10;&#10;&#10;##实现动态排除列&#10;#set($temp = $tool.newHashSet(&quot;testCreateTime&quot;, &quot;otherColumn&quot;))&#10;#foreach($item in $temp)&#10;    #set($newList = $tool.newArrayList())&#10;    #foreach($column in $tableInfo.fullColumn)&#10;        #if($column.name!=$item)&#10;            ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;            $tool.call($newList.add($column))&#10;        #end&#10;    #end&#10;    ##重新保存&#10;    $tableInfo.setFullColumn($newList)&#10;#end&#10;&#10;##对importList进行篡改&#10;#set($temp = $tool.newHashSet())&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.type.startsWith(&quot;java.lang.&quot;))&#10;        ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;        $tool.call($temp.add($column.type))&#10;    #end&#10;#end&#10;##覆盖&#10;#set($importList = $temp)" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="define" />
                    <option name="value" value="##（Velocity宏定义）&#10;&#10;##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(&quot;Test&quot;)&#10;#macro(setTableSuffix $suffix)&#10;    #set($tableName = $!tool.append($tableInfo.name, $suffix))&#10;#end&#10;&#10;##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(&quot;Test&quot;)&#10;#macro(setPackageSuffix $suffix)&#10;#if($suffix!=&quot;&quot;)package #end#if($tableInfo.savePackageName!=&quot;&quot;)$!{tableInfo.savePackageName}.#{end}$!suffix;&#10;#end&#10;&#10;##定义直接保存路径与文件名简化的宏定义，调用方式：#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;#macro(save $path $fileName)&#10;    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))&#10;    $!callback.setFileName($tool.append($tableInfo.name, $fileName))&#10;#end&#10;&#10;##定义表注释的宏定义，调用方式：#tableComment(&quot;注释信息&quot;)&#10;#macro(tableComment $desc)&#10;/**&#10; * $!{tableInfo.name}$desc($!{tableInfo.comment})&#10; *&#10; * @author $!author&#10; * created on $!time.currTime()&#10; */&#10;#end&#10;&#10;##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)&#10;#macro(getSetMethod $column)&#10;&#10;    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {&#10;        return $!{column.name};&#10;    }&#10;&#10;    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {&#10;        this.$!{column.name} = $!{column.name};&#10;    }&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="autoImport" />
                    <option name="value" value="##自动导入包（仅导入实体属性需要的包，通常用于实体类）&#10;#foreach($import in $importList)&#10;#if(!$import.equals(&quot;byte&quot;))&#10;import $!import;&#10;#end&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="removeTablePrefix" />
                    <option name="value" value="##去掉表的t_前缀&#10;#if($tableInfo.obj.name.startsWith(&quot;t_&quot;))&#10;    $!tableInfo.setName($tool.getClassName($tableInfo.obj.name.substring(2)))&#10;#end" />
                  </GlobalConfig>
                </list>
              </option>
              <option name="name" value="Default" />
            </GlobalConfigGroup>
          </value>
        </entry>
      </map>
    </option>
    <option name="templateGroupMap">
      <map>
        <entry key="Default">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##引入宏定义&#10;$!define&#10;&#10;##定义类名&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ParamsDTO&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;dto&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;&#10;import lombok.*;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;ParamsDTO&quot;)&#10;@Data&#10;public class $!{tableInfo.name}ParamsDTO {&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if(!$column.ext.paramsFieldDisable)&#10;    #if(${column.comment})&#10;    &#10;    /**&#10;     * ${column.comment}&#10;     */#end&#10;&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;#end&#10;&#10;}" />
                    <option name="name" value="ParamsDTO" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;&#10;##定义类名&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ResultDTO&quot;))&#10;&#10;##设置回调&#10;##保存文件名&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;##保存路径&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;dto&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;&#10;import lombok.*;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;ResultDTO&quot;)&#10;@Data&#10;public class $!{tableInfo.name}ResultDTO {&#10;#foreach($column in $tableInfo.fullColumn)&#10;#if(!$column.ext.resultDisable)&#10;    #if(${column.comment})&#10;    &#10;    /**&#10;     * ${column.comment}&#10;     */#end&#10;&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;#end&#10;&#10;}" />
                    <option name="name" value="ResultDTO" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Mapper&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapper&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;&#10;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ParamsDTO;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ResultDTO;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}PO;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.MappingTarget;&#10;import org.springframework.stereotype.Component;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.name} PO/DTO转换&#10; *&#10; * @author $!author&#10; * created on $!time.currTime()&#10; */&#10;@Component&#10;@Mapper(componentModel = &quot;spring&quot;)&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * po =&gt; dto&#10;     *&#10;     * @param po 实体类&#10;     * @return dto传输类&#10;     */&#10;    $!{tableInfo.name}ResultDTO po2dto($!{tableInfo.name}PO po);&#10;&#10;    /**&#10;     * pos =&gt; dtos&#10;     *&#10;     * @param pos 实体类集合&#10;     * @return dtos传输类集合&#10;     */&#10;    List&lt;$!{tableInfo.name}ResultDTO&gt; pos2dtos(List&lt;$!{tableInfo.name}PO&gt; pos);&#10;&#10;    /**&#10;     * dto =&gt; po&#10;     *&#10;     * @param dto 传输类&#10;     * @return po实体类&#10;     */&#10;    $!{tableInfo.name}PO dto2po($!{tableInfo.name}ParamsDTO dto);&#10;&#10;    /**&#10;     * dtos =&gt; pos&#10;     *&#10;     * @param dtos 传输类集合&#10;     * @return pos实体类集合&#10;     */&#10;    List&lt;$!{tableInfo.name}PO&gt; dtos2pos(List&lt;$!{tableInfo.name}ParamsDTO&gt; dtos);&#10;&#10;    /**&#10;     * 使用dto更新po&#10;     *&#10;     * @param dto 传输类&#10;     * @param po  实体类&#10;     */&#10;    void updatePoFromDto($!{tableInfo.name}ParamsDTO dto, @MappingTarget $!{tableInfo.name}PO po);&#10;}" />
                    <option name="name" value="Mapper" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##引入宏定义&#10;$!define&#10;&#10;##定义类名&#10;#set($tableName = $tool.append($tableInfo.name, &quot;PO&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/po&quot;))&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;po&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;&#10;import lombok.*;&#10;import me.sdevil507.supports.jpa.BaseJpaSnowflakeIdEntity;&#10;&#10;import javax.persistence.*;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;PO&quot;)&#10;@Entity&#10;@Table(name = &quot;$!tableInfo.obj.name&quot;)&#10;@Data&#10;@EqualsAndHashCode(callSuper = true)&#10;public class $!{tableInfo.name}PO extends BaseJpaSnowflakeIdEntity {&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$tableInfo.pkColumn.get(0).name.equals($column.name))&#10;        #if(${column.comment})&#10;    &#10;    /**&#10;     * ${column.comment}&#10;     */#end&#10;&#10;    @Column&#10;#if($column.ext.LobType)&#10;    @Lob&#10;#end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;#end&#10;&#10;}" />
                    <option name="name" value="PO" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##引入宏定义&#10;$!define&#10;&#10;##定义类名&#10;#set($tableName = $tool.append($tableInfo.name, &quot;PO&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/po&quot;))&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;po&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;&#10;import lombok.*;&#10;import me.sdevil507.supports.jpa.BaseJpaSnowflakeIdAndAuditEntity;&#10;&#10;import javax.persistence.*;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;PO&quot;)&#10;@Entity&#10;@Table(name = &quot;$!tableInfo.obj.name&quot;)&#10;@Data&#10;@EqualsAndHashCode(callSuper = true)&#10;public class $!{tableInfo.name}PO extends BaseJpaSnowflakeIdAndAuditEntity {&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$tableInfo.pkColumn.get(0).name.equals($column.name)&amp;&amp;!$column.name.equals(&quot;createdBy&quot;)&amp;&amp;!$column.name.equals(&quot;createdDate&quot;)&amp;&amp;!$column.name.equals(&quot;lastModifiedBy&quot;)&amp;&amp;!$column.name.equals(&quot;lastModifiedDate&quot;))&#10;        #if(${column.comment})&#10;    &#10;    /**&#10;     * ${column.comment}&#10;     */#end&#10;&#10;    @Column&#10;#if($column.ext.LobType)&#10;    @Lob&#10;#end&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;#end&#10;&#10;}" />
                    <option name="name" value="AuditPO" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;#set($serviceName=$tool.append($!tool.firstLowerCase($!{tableInfo.name}),'Service'))&#10;#set($mapperName=$tool.append($!tool.firstLowerCase($!{tableInfo.name}),'Mapper'))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}PO;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ResultDTO;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ParamsDTO;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import me.sdevil507.supports.jpa.*;&#10;import me.sdevil507.supports.result.ApiResultDTO;&#10;import me.sdevil507.supports.result.ApiResultGenerator;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableName}&#10; *&#10; * @author $!author&#10; * created on $!time.currTime()&#10; */&#10;@Controller&#10;@RequestMapping(&quot;&quot;)&#10;@Slf4j&#10;public class $!{tableName} {&#10;&#10;    @Autowired&#10;    private $!{tableInfo.name}Service $!{serviceName};&#10;&#10;    @Autowired&#10;    private $!{tableInfo.name}Mapper $!{mapperName};&#10;&#10;    /**&#10;     * 获取全部信息列表&#10;     *&#10;     * @param searchDto     查询参数&#10;     * @param sortParamsDto 排序参数&#10;     * @return 信息列表&#10;     */&#10;    @RequestMapping(value = &quot;/readAll&quot;, method = RequestMethod.GET)&#10;    @ResponseBody&#10;    public ApiResultDTO readAll($!{tableInfo.name}ParamsDTO searchDto, SortParamsDTO sortParamsDto) {&#10;        ApiResultDTO apiResultDto;&#10;        try {&#10;            List&lt;$!{tableInfo.name}ResultDTO&gt; list = $!{mapperName}.pos2dtos($!{serviceName}.readAll(searchDto, sortParamsDto));&#10;            apiResultDto = ApiResultGenerator.create(&quot;0&quot;, &quot;获取信息列表成功!&quot;, list);&#10;        } catch (Exception e) {&#10;            log.error(&quot;获取信息列表失败:&quot;, e);&#10;            apiResultDto = ApiResultGenerator.create(&quot;-1&quot;, &quot;获取信息列表失败!&quot;);&#10;        }&#10;        return apiResultDto;&#10;    }&#10;&#10;    /**&#10;     * 分页获取信息列表&#10;     *&#10;     * @param searchDto     查询参数&#10;     * @param pageParamsDto 分页参数&#10;     * @param sortParamsDto 排序参数&#10;     * @return 分页数据&#10;     */&#10;    @SuppressWarnings(&quot;Convert2Lambda&quot;)&#10;    @RequestMapping(value = &quot;/readAllByPage&quot;, method = RequestMethod.GET)&#10;    @ResponseBody&#10;    public ApiResultDTO readAllByPage($!{tableInfo.name}ParamsDTO searchDto, PageParamsDTO pageParamsDto, SortParamsDTO sortParamsDto) {&#10;        ApiResultDTO apiResultDto;&#10;        try {&#10;            Page&lt;$!{tableInfo.name}PO&gt; pagePos = $!{serviceName}.readAllByPage(searchDto, pageParamsDto, sortParamsDto);&#10;            PageResultDTO&lt;$!{tableInfo.name}ResultDTO&gt; pageResultDto = PageResultGenerator.convert(pagePos, new PageConvertCallBack&lt;$!{tableInfo.name}ResultDTO, $!{tableInfo.name}PO&gt;() {&#10;                @Override&#10;                public List&lt;$!{tableInfo.name}ResultDTO&gt; exec(List&lt;$!{tableInfo.name}PO&gt; list) {&#10;                    return $!{mapperName}.pos2dtos(list);&#10;                }&#10;            });&#10;            apiResultDto = ApiResultGenerator.create(&quot;0&quot;, &quot;分页数据获取成功!&quot;, pageResultDto);&#10;        } catch (Exception e) {&#10;            log.error(&quot;分页数据获取失败:&quot;, e);&#10;            apiResultDto = ApiResultGenerator.create(&quot;-1&quot;, &quot;分页数据获取失败!&quot;);&#10;        }&#10;        return apiResultDto;&#10;    }&#10;&#10;    /**&#10;     * 创建&#10;     *&#10;     * @param dto 传输类&#10;     * @return 执行反馈&#10;     */&#10;    @RequestMapping(value = &quot;/create&quot;, method = RequestMethod.POST)&#10;    @ResponseBody&#10;    public ApiResultDTO create($!{tableInfo.name}ParamsDTO dto) {&#10;        ApiResultDTO apiResultDto;&#10;        try {&#10;            $!{serviceName}.create(dto);&#10;            apiResultDto = ApiResultGenerator.create(&quot;0&quot;, &quot;创建记录成功!&quot;);&#10;        } catch (Exception e) {&#10;            log.error(&quot;创建记录失败:&quot;, e);&#10;            apiResultDto = ApiResultGenerator.create(&quot;-1&quot;, &quot;创建记录失败!&quot;);&#10;        }&#10;        return apiResultDto;&#10;    }&#10;&#10;    /**&#10;     * 更新&#10;     *&#10;     * @param dto 传输类&#10;     * @return 执行反馈&#10;     */&#10;    @RequestMapping(value = &quot;/update&quot;, method = RequestMethod.POST)&#10;    @ResponseBody&#10;    public ApiResultDTO update($!{tableInfo.name}ParamsDTO dto) {&#10;        ApiResultDTO apiResultDto;&#10;        try {&#10;            $!{serviceName}.update(dto);&#10;            apiResultDto = ApiResultGenerator.create(&quot;0&quot;, &quot;更新记录成功!&quot;);&#10;        } catch (Exception e) {&#10;            log.error(&quot;更新记录失败:&quot;, e);&#10;            apiResultDto = ApiResultGenerator.create(&quot;-1&quot;, &quot;更新记录失败!&quot;);&#10;        }&#10;        return apiResultDto;&#10;    }&#10;&#10;    /**&#10;     * 删除&#10;     *&#10;     * @param dto 传输类&#10;     * @return 执行反馈&#10;     */&#10;    @RequestMapping(value = &quot;/delete&quot;, method = RequestMethod.POST)&#10;    @ResponseBody&#10;    public ApiResultDTO delete($!{tableInfo.name}ParamsDTO dto) {&#10;        ApiResultDTO apiResultDto;&#10;        try {&#10;            $!{serviceName}.delete(dto);&#10;            apiResultDto = ApiResultGenerator.create(&quot;0&quot;, &quot;删除记录成功!&quot;);&#10;        } catch (Exception e) {&#10;            log.error(&quot;删除记录失败:&quot;, e);&#10;            apiResultDto = ApiResultGenerator.create(&quot;-1&quot;, &quot;删除记录失败!&quot;);&#10;        }&#10;        return apiResultDto;&#10;    }&#10;}" />
                    <option name="name" value="Controller" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}PO;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ParamsDTO;&#10;import org.springframework.data.domain.Page;&#10;import me.sdevil507.supports.jpa.SortParamsDTO;&#10;import me.sdevil507.supports.jpa.PageParamsDTO;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.name}Service&#10; *&#10; * @author $!author&#10; * created on $!time.currTime()&#10; */&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 查询全部记录&#10;     * @param searchParamsDto 搜索DTO&#10;     * @param sortParamsDto 排序DTO&#10;     * @return 记录列表&#10;     */&#10;    List&lt;$!{tableInfo.name}PO&gt; readAll($!{tableInfo.name}ParamsDTO searchParamsDto, SortParamsDTO sortParamsDto);&#10;&#10;    /**&#10;     * 分页获取记录&#10;     *&#10;     * @param searchParamsDto 查询DTO&#10;     * @param pageParamsDto 分页DTO&#10;     * @param sortParamsDto 排序DTO&#10;     * @return 分页记录&#10;     */&#10;    Page&lt;$!{tableInfo.name}PO&gt; readAllByPage($!{tableInfo.name}ParamsDTO searchParamsDto, PageParamsDTO pageParamsDto, SortParamsDTO sortParamsDto);&#10;&#10;    /**&#10;     * 创建记录&#10;     *&#10;     * @param dto 传输类&#10;     */&#10;    void create($!{tableInfo.name}ParamsDTO dto);&#10;&#10;    /**&#10;     * 更新记录&#10;     *&#10;     * @param dto 传输类&#10;     */&#10;    void update($!{tableInfo.name}ParamsDTO dto);&#10;&#10;    /**&#10;     * 删除记录&#10;     *&#10;     * @param dto 传输类&#10;     */&#10;    void delete($!{tableInfo.name}ParamsDTO dto);&#10;}" />
                    <option name="name" value="Service" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;#set($repositoryName=$tool.append($!tool.firstLowerCase($!{tableInfo.name}),'Repository'))&#10;#set($mapperName=$tool.append($!tool.firstLowerCase($!{tableInfo.name}),'Mapper'))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}PO;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ParamsDTO;&#10;import $!{tableInfo.savePackageName}.repository.$!{tableInfo.name}Repository;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import me.sdevil507.supports.jpa.PageParamsDTO;&#10;import com.querydsl.core.types.Predicate;&#10;import $!{tableInfo.savePackageName}.po.Q$!{tableInfo.name}PO;&#10;import me.sdevil507.supports.jpa.SortParamsDTO;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;&#10;import org.springframework.stereotype.Service;&#10;import com.google.common.collect.Lists;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.data.domain.Pageable;&#10;&#10;import javax.annotation.Resource;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableName}&#10; *&#10; * @author $!author&#10; * created on $!time.currTime()&#10; */&#10;@Service&#10;public class $!{tableName} implements $!{tableInfo.name}Service {&#10;&#10;    @Resource&#10;    private $!{tableInfo.name}Repository $!{repositoryName};&#10;    &#10;    @Autowired&#10;    private $!{tableInfo.name}Mapper $!{mapperName};&#10;&#10;    @Override&#10;    public List&lt;$!{tableInfo.name}PO&gt; readAll($!{tableInfo.name}ParamsDTO searchParamsDto, SortParamsDTO sortParamsDto){&#10;        Q$!{tableInfo.name}PO q$!{tableInfo.name}Po = Q$!{tableInfo.name}PO.$!tool.firstLowerCase($!{tableInfo.name})PO;&#10;&#10;        // 开启谓语查询条件&#10;        Predicate predicate = q$!{tableInfo.name}Po.id.isNotNull();&#10;&#10;        // TODO&#10;        // 进行搜索条件的选取加入&#10;        // demo:&#10;        // String name=searchParamsDto.getName();&#10;        // if(!StringUtils.isEmpty(name)){&#10;        //     predicate = ExpressionUtils.and(predicate, q$!{tableInfo.name}Po.name.like(&quot;%&quot; + name + &quot;%&quot;));&#10;        // }&#10;&#10;        // 排序&#10;        Sort sort = sortParamsDto.getSort();&#10;        if (null == sort) {&#10;            // TODO&#10;            // 如果未给定初始排序顺序，则自行增加&#10;            // demo:&#10;            // sort = Sort.by(new Sort.Order(Sort.Direction.DESC, &quot;createdDate&quot;));&#10;        }&#10;&#10;        // 执行Iterable转换List&#10;        List&lt;$!{tableInfo.name}PO&gt; list = Lists.newArrayList($!{repositoryName}.findAll(predicate, sort).iterator());&#10;        return list;&#10;    }&#10;&#10;    @Override&#10;    public Page&lt;$!{tableInfo.name}PO&gt; readAllByPage($!{tableInfo.name}ParamsDTO searchParamsDto, PageParamsDTO pageParamsDto, SortParamsDTO sortParamsDto){&#10;        Q$!{tableInfo.name}PO q$!{tableInfo.name}Po = Q$!{tableInfo.name}PO.$!tool.firstLowerCase($!{tableInfo.name})PO;&#10;&#10;        // 开启谓语查询条件&#10;        Predicate predicate = q$!{tableInfo.name}Po.id.isNotNull();&#10;&#10;        // TODO&#10;        // 进行搜索条件的选取加入&#10;        // demo:&#10;        // String name=searchParamsDto.getName();&#10;        // if(!StringUtils.isEmpty(name)){&#10;        //     predicate = ExpressionUtils.and(predicate, q$!{tableInfo.name}Po.name.like(&quot;%&quot; + name + &quot;%&quot;));&#10;        // }&#10;&#10;        // 排序&#10;        Sort sort = sortParamsDto.getSort();&#10;        if (null == sort) {&#10;            // TODO&#10;            // 如果未给定初始排序顺序，则自行增加&#10;            // demo:&#10;            // sort = new Sort(new Sort.Order(Sort.Direction.DESC, &quot;createdDate&quot;));&#10;        }&#10;&#10;        // 执行返回&#10;        Pageable pageable = pageParamsDto.getPageableWithSort(sort);&#10;        return $!{repositoryName}.findAll(predicate, pageable);&#10;    }&#10;&#10;    @Override&#10;    public void create($!{tableInfo.name}ParamsDTO dto) {&#10;        $!{repositoryName}.save($!{mapperName}.dto2po(dto));&#10;    }&#10;&#10;    @Override&#10;    public void update($!{tableInfo.name}ParamsDTO dto) {&#10;        $!{tableInfo.name}PO po = $!{repositoryName}.findById(dto.getId()).orElse(null);&#10;        if (null !=po) {&#10;            $!{mapperName}.updatePoFromDto(dto, po);&#10;            $!{repositoryName}.save(po);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void delete($!{tableInfo.name}ParamsDTO dto) {&#10;        $!{repositoryName}.deleteById(dto.getId());&#10;    }&#10;&#10;}" />
                    <option name="name" value="ServiceImpl" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入去除表前缀&#10;$!removeTablePrefix&#10;&#10;##引入宏定义&#10;$!define&#10;&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Repository&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/repository&quot;))&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;repository&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;import me.sdevil507.supports.jpa.BaseJpaDslRepository;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}PO;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;Repository&quot;)&#10;public interface $!{tableName} extends BaseJpaDslRepository&lt;$!{tableInfo.name}PO, $!{pk.shortType}&gt; {&#10;&#10;}" />
                    <option name="name" value="Repository" />
                  </Template>
                  <Template>
                    <option name="code" value="//调试表原始对象&#10;$!tool.debug($tableInfo.obj)&#10;&#10;//调试列原始对象&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj)&#10;&#10;//调试列原始列类型&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)&#10;&#10;//获取原始列类型中的字段&#10;sqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, &quot;typeName&quot;)&#10;&#10;//执行原始列类型中的方法&#10;sqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()&#10;" />
                    <option name="name" value="debug.json" />
                  </Template>
                </list>
              </option>
              <option name="name" value="Default" />
            </TemplateGroup>
          </value>
        </entry>
      </map>
    </option>
    <option name="typeMapperGroupMap">
      <map>
        <entry key="Default">
          <value>
            <TypeMapperGroup>
              <option name="elementList">
                <list>
                  <TypeMapper>
                    <option name="columnType" value="varchar(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="char(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="text" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Double" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+,\d+\))?" />
                    <option name="javaType" value="java.math.BigDecimal" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="integer" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int4" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int8" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="bigint(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="datetime" />
                    <option name="javaType" value="java.util.Date" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="timestamp" />
                    <option name="javaType" value="java.util.Date" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="boolean" />
                    <option name="javaType" value="java.lang.Boolean" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="bit(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Boolean" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="datetime(\(\d+\))?" />
                    <option name="javaType" value="java.util.Date" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="varchar2(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="number(\(1\))?" />
                    <option name="javaType" value="java.lang.Boolean" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="timestamp(\(\d+\))?" />
                    <option name="javaType" value="java.util.Date" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="tinyint(\(\d+\))?" />
                    <option name="javaType" value="byte" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="double(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Double" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="longtext(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="clob" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="number(\(\*\))?" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="number(\(\d+,\d+\))?" />
                    <option name="javaType" value="java.math.BigDecimal" />
                  </TypeMapper>
                </list>
              </option>
              <option name="name" value="Default" />
            </TypeMapperGroup>
          </value>
        </entry>
      </map>
    </option>
  </component>
</application>