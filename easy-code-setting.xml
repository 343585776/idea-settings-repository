<application>
  <component name="EasyCodeSetting">
    <option name="author" value="sdevil507" />
    <option name="columnConfigGroupMap">
      <map>
        <entry key="Default">
          <value>
            <ColumnConfigGroup>
              <option name="elementList">
                <list>
                  <ColumnConfig>
                    <option name="title" value="resultDisable" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                  <ColumnConfig>
                    <option name="title" value="paramsDisable" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                  <ColumnConfig>
                    <option name="title" value="searchEnable" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                </list>
              </option>
              <option name="name" value="Default" />
            </ColumnConfigGroup>
          </value>
        </entry>
        <entry key="sdevil507">
          <value>
            <ColumnConfigGroup>
              <option name="elementList">
                <list>
                  <ColumnConfig>
                    <option name="title" value="resultDisable" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                  <ColumnConfig>
                    <option name="title" value="paramsDisable" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                  <ColumnConfig>
                    <option name="title" value="searchEnable" />
                    <option name="type" value="BOOLEAN" />
                  </ColumnConfig>
                </list>
              </option>
              <option name="name" value="sdevil507" />
            </ColumnConfigGroup>
          </value>
        </entry>
      </map>
    </option>
    <option name="currColumnConfigGroupName" value="sdevil507" />
    <option name="currGlobalConfigGroupName" value="sdevil507" />
    <option name="currTemplateGroupName" value="ermerson" />
    <option name="currTypeMapperGroupName" value="sdevil507" />
    <option name="globalConfigGroupMap">
      <map>
        <entry key="Default">
          <value>
            <GlobalConfigGroup>
              <option name="elementList">
                <list>
                  <GlobalConfig>
                    <option name="name" value="init" />
                    <option name="value" value="##初始化区域&#10;&#10;##去掉表的t_前缀&#10;#if($tableInfo.obj.name.startsWith(&quot;t_&quot;))&#10;    $!tableInfo.setName($tool.getClassName($tableInfo.obj.name.substring(2)))&#10;#end&#10;&#10;&#10;&#10;##实现动态排除列&#10;#set($temp = $tool.newHashSet(&quot;testCreateTime&quot;, &quot;otherColumn&quot;))&#10;#foreach($item in $temp)&#10;    #set($newList = $tool.newArrayList())&#10;    #foreach($column in $tableInfo.fullColumn)&#10;        #if($column.name!=$item)&#10;            ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;            $tool.call($newList.add($column))&#10;        #end&#10;    #end&#10;    ##重新保存&#10;    $tableInfo.setFullColumn($newList)&#10;#end&#10;&#10;##对importList进行篡改&#10;#set($temp = $tool.newHashSet())&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.type.startsWith(&quot;java.lang.&quot;))&#10;        ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;        $tool.call($temp.add($column.type))&#10;    #end&#10;#end&#10;##覆盖&#10;#set($importList = $temp)" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="define" />
                    <option name="value" value="##（Velocity宏定义）&#10;&#10;##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(&quot;Test&quot;)&#10;#macro(setTableSuffix $suffix)&#10;    #set($tableName = $!tool.append($tableInfo.name, $suffix))&#10;#end&#10;&#10;##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(&quot;Test&quot;)&#10;#macro(setPackageSuffix $suffix)&#10;#if($suffix!=&quot;&quot;)package #end#if($tableInfo.savePackageName!=&quot;&quot;)$!{tableInfo.savePackageName}.#{end}$!suffix;&#10;#end&#10;&#10;##定义直接保存路径与文件名简化的宏定义，调用方式：#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;#macro(save $path $fileName)&#10;    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))&#10;    $!callback.setFileName($tool.append($tableInfo.name, $fileName))&#10;#end&#10;&#10;##定义表注释的宏定义，调用方式：#tableComment(&quot;注释信息&quot;)&#10;#macro(tableComment $desc)&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})$desc&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;#end&#10;&#10;##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)&#10;#macro(getSetMethod $column)&#10;&#10;    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {&#10;        return $!{column.name};&#10;    }&#10;&#10;    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {&#10;        this.$!{column.name} = $!{column.name};&#10;    }&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="autoImport" />
                    <option name="value" value="##自动导入包（仅导入实体属性需要的包，通常用于实体类）&#10;#foreach($import in $importList)&#10;import $!import;&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="mybatisSupport" />
                    <option name="value" value="##针对Mybatis 进行支持，主要用于生成xml文件&#10;#foreach($column in $tableInfo.fullColumn)&#10;    ##储存列类型&#10;    $tool.call($column.ext.put(&quot;sqlType&quot;, $tool.getField($column.obj.dataType, &quot;typeName&quot;)))&#10;    #if($tool.newHashSet(&quot;java.lang.String&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;VARCHAR&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Boolean&quot;, &quot;boolean&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;BOOLEAN&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Byte&quot;, &quot;byte&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;BYTE&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Integer&quot;, &quot;int&quot;, &quot;java.lang.Short&quot;, &quot;short&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;INTEGER&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Long&quot;, &quot;long&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;LONG INTEGER&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Float&quot;, &quot;float&quot;, &quot;java.lang.Double&quot;, &quot;double&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;NUMERIC&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.util.Date&quot;, &quot;java.sql.Timestamp&quot;, &quot;java.time.Instant&quot;, &quot;java.time.LocalDateTime&quot;, &quot;java.time.OffsetDateTime&quot;, &quot;&#9;java.time.ZonedDateTime&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;TIMESTAMP&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.sql.Date&quot;, &quot;java.time.LocalDate&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;TIMESTAMP&quot;)&#10;    #else&#10;        ##其他类型&#10;        #set($jdbcType=&quot;OTHER&quot;)&#10;    #end&#10;    $tool.call($column.ext.put(&quot;jdbcType&quot;, $jdbcType))&#10;#end&#10;&#10;##定义宏，查询所有列&#10;#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end" />
                  </GlobalConfig>
                </list>
              </option>
              <option name="name" value="Default" />
            </GlobalConfigGroup>
          </value>
        </entry>
        <entry key="sdevil507">
          <value>
            <GlobalConfigGroup>
              <option name="elementList">
                <list>
                  <GlobalConfig>
                    <option name="name" value="init" />
                    <option name="value" value="##初始化区域&#10;&#10;##去掉表的t_前缀&#10;#if($tableInfo.obj.name.startsWith(&quot;t_&quot;))&#10;    $!tableInfo.setName($tool.getClassName($tableInfo.obj.name.substring(2)))&#10;#end&#10;&#10;&#10;##实现动态排除列&#10;#set($temp = $tool.newHashSet(&quot;testCreateTime&quot;, &quot;otherColumn&quot;))&#10;#foreach($item in $temp)&#10;    #set($newList = $tool.newArrayList())&#10;    #foreach($column in $tableInfo.fullColumn)&#10;        #if($column.name!=$item)&#10;            ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;            $tool.call($newList.add($column))&#10;        #end&#10;    #end&#10;    ##重新保存&#10;    $tableInfo.setFullColumn($newList)&#10;#end&#10;&#10;##对importList进行篡改&#10;#set($temp = $tool.newHashSet())&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.type.startsWith(&quot;java.lang.&quot;))&#10;        ##带有反回值的方法调用时使用$tool.call来消除返回值&#10;        $tool.call($temp.add($column.type))&#10;    #end&#10;#end&#10;##覆盖&#10;#set($importList = $temp)" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="define" />
                    <option name="value" value="##（Velocity宏定义）&#10;&#10;##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(&quot;Test&quot;)&#10;#macro(setTableSuffix $suffix)&#10;    #set($tableName = $!tool.append($tableInfo.name, $suffix))&#10;#end&#10;&#10;##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(&quot;Test&quot;)&#10;#macro(setPackageSuffix $suffix)&#10;#if($suffix!=&quot;&quot;)package #end#if($tableInfo.savePackageName!=&quot;&quot;)$!{tableInfo.savePackageName}.#{end}$!suffix;&#10;#end&#10;&#10;##定义直接保存路径与文件名简化的宏定义，调用方式：#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;#macro(save $path $fileName)&#10;    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))&#10;    $!callback.setFileName($tool.append($tableInfo.name, $fileName))&#10;#end&#10;&#10;##定义表注释的宏定义，调用方式：#tableComment(&quot;注释信息&quot;)&#10;#macro(tableComment $desc)&#10;/**&#10; * $!{tableInfo.name}&#10; *&#10; * @author $!author&#10; */&#10;#end&#10;&#10;##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)&#10;#macro(getSetMethod $column)&#10;&#10;    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {&#10;        return $!{column.name};&#10;    }&#10;&#10;    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {&#10;        this.$!{column.name} = $!{column.name};&#10;    }&#10;#end&#10;&#10;##通过表名称生成view.html的存储路径&#10;##定义html路径&#10;#set($htmlPath=&quot;&quot;)&#10;#macro(generateHtmlPath $tableName)&#10;    ##根据表名分割&#10;    #set($tempPaths=$tableInfo.obj.name.split(&quot;_&quot;))&#10;    ##循环拼接&#10;    #foreach($item in $tempPaths)&#10;        #set($htmlPath=$htmlPath+&quot;/&quot;+$item)&#10;    #end&#10;#end&#10;&#10;##通过表名称生成Controller中的权限字符串&#10;#set($permission=&quot;&quot;)&#10;#macro(generatePermission $tableName)&#10;##根据表名分割&#10;    #set($tempPermissions=$tableInfo.obj.name.split(&quot;_&quot;))&#10;    ##循环拼接&#10;    #foreach($item in $tempPermissions)&#10;        #if($!{velocityCount}==1)&#10;            &#10;        #else&#10;            #set($permission=$permission+&quot;:&quot;+$item)&#10;        #end&#10;    #end&#10;    #set($permission=$permission.substring(1))&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="autoImport" />
                    <option name="value" value="##自动导入包（仅导入实体属性需要的包，通常用于实体类）&#10;#foreach($import in $importList)&#10;import $!import;&#10;#end" />
                  </GlobalConfig>
                  <GlobalConfig>
                    <option name="name" value="mybatisSupport" />
                    <option name="value" value="##针对Mybatis 进行支持，主要用于生成xml文件&#10;#foreach($column in $tableInfo.fullColumn)&#10;    ##储存列类型&#10;    $tool.call($column.ext.put(&quot;sqlType&quot;, $tool.getField($column.obj.dataType, &quot;typeName&quot;)))&#10;    #if($tool.newHashSet(&quot;java.lang.String&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;VARCHAR&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Boolean&quot;, &quot;boolean&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;BOOLEAN&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Byte&quot;, &quot;byte&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;BYTE&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Integer&quot;, &quot;int&quot;, &quot;java.lang.Short&quot;, &quot;short&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;INTEGER&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Long&quot;, &quot;long&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;LONG INTEGER&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.lang.Float&quot;, &quot;float&quot;, &quot;java.lang.Double&quot;, &quot;double&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;NUMERIC&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.util.Date&quot;, &quot;java.sql.Timestamp&quot;, &quot;java.time.Instant&quot;, &quot;java.time.LocalDateTime&quot;, &quot;java.time.OffsetDateTime&quot;, &quot;&#9;java.time.ZonedDateTime&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;TIMESTAMP&quot;)&#10;    #elseif($tool.newHashSet(&quot;java.sql.Date&quot;, &quot;java.time.LocalDate&quot;).contains($column.type))&#10;        #set($jdbcType=&quot;TIMESTAMP&quot;)&#10;    #else&#10;        ##其他类型&#10;        #set($jdbcType=&quot;OTHER&quot;)&#10;    #end&#10;    $tool.call($column.ext.put(&quot;jdbcType&quot;, $jdbcType))&#10;#end&#10;&#10;##定义宏，查询所有列&#10;#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end" />
                  </GlobalConfig>
                </list>
              </option>
              <option name="name" value="sdevil507" />
            </GlobalConfigGroup>
          </value>
        </entry>
      </map>
    </option>
    <option name="templateGroupMap">
      <map>
        <entry key="Default">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;&#10;##使用宏定义设置回调（保存位置与文件后缀）&#10;#save(&quot;/entity&quot;, &quot;.java&quot;)&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;entity&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import java.io.Serializable;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;实体类&quot;)&#10;public class $!{tableInfo.name} implements Serializable {&#10;    private static final long serialVersionUID = $!tool.serial();&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(${column.comment})//${column.comment}#end&#10;&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;#foreach($column in $tableInfo.fullColumn)&#10;##使用宏定义实现get,set方法&#10;#getSetMethod($column)&#10;#end&#10;&#10;}" />
                    <option name="name" value="entity.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Dao&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dao&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import org.apache.ibatis.annotations.Param;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 查询指定行数据&#10;     *&#10;     * @param offset 查询起始位置&#10;     * @param limit 查询条数&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; queryAllByLimit(@Param(&quot;offset&quot;) int offset, @Param(&quot;limit&quot;) int limit);&#10;&#10;&#10;    /**&#10;     * 通过实体作为筛选条件查询&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; queryAll($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 影响行数&#10;     */&#10;    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 影响行数&#10;     */&#10;    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 影响行数&#10;     */&#10;    int deleteById($!pk.shortType $!pk.name);&#10;&#10;}" />
                    <option name="name" value="dao.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表服务接口&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);&#10;&#10;    /**&#10;     * 查询多条数据&#10;     *&#10;     * @param offset 查询起始位置&#10;     * @param limit 查询条数&#10;     * @return 对象列表&#10;     */&#10;    List&lt;$!{tableInfo.name}&gt; queryAllByLimit(int offset, int limit);&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 是否成功&#10;     */&#10;    boolean deleteById($!pk.shortType $!pk.name);&#10;&#10;}" />
                    <option name="name" value="service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.stereotype.Service;&#10;&#10;import javax.annotation.Resource;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;@Service(&quot;$!tool.firstLowerCase($!{tableInfo.name})Service&quot;)&#10;public class $!{tableName} implements $!{tableInfo.name}Service {&#10;    @Resource&#10;    private $!{tableInfo.name}Dao $!tool.firstLowerCase($!{tableInfo.name})Dao;&#10;&#10;    /**&#10;     * 通过ID查询单条数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public $!{tableInfo.name} queryById($!pk.shortType $!pk.name) {&#10;        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryById($!pk.name);&#10;    }&#10;&#10;    /**&#10;     * 查询多条数据&#10;     *&#10;     * @param offset 查询起始位置&#10;     * @param limit 查询条数&#10;     * @return 对象列表&#10;     */&#10;    @Override&#10;    public List&lt;$!{tableInfo.name}&gt; queryAllByLimit(int offset, int limit) {&#10;        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryAllByLimit(offset, limit);&#10;    }&#10;&#10;    /**&#10;     * 新增数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.insert($!tool.firstLowerCase($!{tableInfo.name}));&#10;        return $!tool.firstLowerCase($!{tableInfo.name});&#10;    }&#10;&#10;    /**&#10;     * 修改数据&#10;     *&#10;     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象&#10;     * @return 实例对象&#10;     */&#10;    @Override&#10;    public $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {&#10;        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.update($!tool.firstLowerCase($!{tableInfo.name}));&#10;        return this.queryById($!{tool.firstLowerCase($!{tableInfo.name})}.get$!tool.firstUpperCase($pk.name)());&#10;    }&#10;&#10;    /**&#10;     * 通过主键删除数据&#10;     *&#10;     * @param $!pk.name 主键&#10;     * @return 是否成功&#10;     */&#10;    @Override&#10;    public boolean deleteById($!pk.shortType $!pk.name) {&#10;        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteById($!pk.name) &gt; 0;&#10;    }&#10;}" />
                    <option name="name" value="serviceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import javax.annotation.Resource;&#10;&#10;/**&#10; * $!{tableInfo.comment}($!{tableInfo.name})表控制层&#10; *&#10; * @author $!author&#10; * @since $!time.currTime()&#10; */&#10;@RestController&#10;@RequestMapping(&quot;$!tool.firstLowerCase($tableInfo.name)&quot;)&#10;public class $!{tableName} {&#10;    /**&#10;     * 服务对象&#10;     */&#10;    @Resource&#10;    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;&#10;&#10;    /**&#10;     * 通过主键查询单条数据&#10;     *&#10;     * @param id 主键&#10;     * @return 单条数据&#10;     */&#10;    @GetMapping(&quot;selectOne&quot;)&#10;    public $!{tableInfo.name} selectOne($!pk.shortType id) {&#10;        return this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryById(id);&#10;    }&#10;&#10;}" />
                    <option name="name" value="controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入mybatis支持&#10;$!mybatisSupport&#10;&#10;##设置保存名称与保存位置&#10;$!callback.setFileName($tool.append($!{tableInfo.name}, &quot;Dao.xml&quot;))&#10;$!callback.setSavePath($tool.append($modulePath, &quot;/src/main/resources/mapper&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&#10;&lt;mapper namespace=&quot;$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao&quot;&gt;&#10;&#10;    &lt;resultMap type=&quot;$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}&quot; id=&quot;$!{tableInfo.name}Map&quot;&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;        &lt;result property=&quot;$!column.name&quot; column=&quot;$!column.obj.name&quot; jdbcType=&quot;$!column.ext.jdbcType&quot;/&gt;&#10;#end&#10;    &lt;/resultMap&gt;&#10;&#10;    &lt;!--查询单个--&gt;&#10;    &lt;select id=&quot;queryById&quot; resultMap=&quot;$!{tableInfo.name}Map&quot;&gt;&#10;        select&#10;          #allSqlColumn()&#10;&#10;        from $!{tableInfo.obj.parent.name}.$!tableInfo.obj.name&#10;        where $!pk.obj.name = #{$!pk.name}&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--查询指定行数据--&gt;&#10;    &lt;select id=&quot;queryAllByLimit&quot; resultMap=&quot;$!{tableInfo.name}Map&quot;&gt;&#10;        select&#10;          #allSqlColumn()&#10;&#10;        from $!{tableInfo.obj.parent.name}.$!tableInfo.obj.name&#10;        limit #{offset}, #{limit}&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--通过实体作为筛选条件查询--&gt;&#10;    &lt;select id=&quot;queryAll&quot; resultMap=&quot;$!{tableInfo.name}Map&quot;&gt;&#10;        select&#10;          #allSqlColumn()&#10;&#10;        from $!{tableInfo.obj.parent.name}.$!tableInfo.obj.name&#10;        &lt;where&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;            &lt;if test=&quot;$!column.name != null#if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;                and $!column.obj.name = #{$!column.name}&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/where&gt;&#10;    &lt;/select&gt;&#10;&#10;    &lt;!--新增所有列--&gt;&#10;    &lt;insert id=&quot;insert&quot; keyProperty=&quot;$!pk.name&quot; useGeneratedKeys=&quot;true&quot;&gt;&#10;        insert into $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)&#10;        values (#foreach($column in $tableInfo.otherColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)&#10;    &lt;/insert&gt;&#10;&#10;    &lt;!--通过主键修改数据--&gt;&#10;    &lt;update id=&quot;update&quot;&gt;&#10;        update $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name}&#10;        &lt;set&gt;&#10;#foreach($column in $tableInfo.otherColumn)&#10;            &lt;if test=&quot;$!column.name != null#if($column.type.equals(&quot;java.lang.String&quot;)) and $!column.name != ''#end&quot;&gt;&#10;                $!column.obj.name = #{$!column.name},&#10;            &lt;/if&gt;&#10;#end&#10;        &lt;/set&gt;&#10;        where $!pk.obj.name = #{$!pk.name}&#10;    &lt;/update&gt;&#10;&#10;    &lt;!--通过主键删除--&gt;&#10;    &lt;delete id=&quot;deleteById&quot;&gt;&#10;        delete from $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name}&#10;    &lt;/delete&gt;&#10;&#10;&lt;/mapper&gt;" />
                    <option name="name" value="mapper.xml" />
                  </Template>
                  <Template>
                    <option name="code" value="//调试表原始对象&#10;$!tool.debug($tableInfo.obj)&#10;&#10;//调试列原始对象&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj)&#10;&#10;//调试列原始列类型&#10;$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)&#10;&#10;//获取原始列类型中的字段&#10;sqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, &quot;typeName&quot;)&#10;&#10;//执行原始列类型中的方法&#10;sqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()&#10;" />
                    <option name="name" value="debug.json" />
                  </Template>
                </list>
              </option>
              <option name="name" value="Default" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="ermerson">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;&#10;##定义类名&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ResultDTO&quot;))&#10;&#10;##设置回调&#10;##保存文件名&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;##保存路径&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;dto&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import lombok.Data;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;ResultDTO&quot;)&#10;@Data&#10;public class $!{tableInfo.name}ResultDTO {&#10;#foreach($column in $tableInfo.fullColumn)&#10;  #if(!$column.ext.resultDisable)&#10;#if(${column.comment})/**&#10;     * ${column.comment}&#10;     */#end&#10;&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;  #end&#10;#end&#10;&#10;}" />
                    <option name="name" value="ResultDTO.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;&#10;##定义类名&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ParamsDTO&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;dto&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import lombok.Data;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;ParamsDTO&quot;)&#10;@Data&#10;public class $!{tableInfo.name}ParamsDTO {&#10;#foreach($column in $tableInfo.fullColumn)&#10;  #if(!$column.ext.paramsDisable)&#10;#if(${column.comment})/**&#10;     * ${column.comment}&#10;     */#end&#10;&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;    &#10;  #end&#10;#end&#10;&#10;}" />
                    <option name="name" value="ParamsDTO.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Mapper&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapper&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;&#10;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}PO;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ResultDTO;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ParamsDTO;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.MappingTarget;&#10;import org.mapstruct.factory.Mappers;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.name} PO/DTO转换&#10; *&#10; * @author $!author&#10; */&#10;@Mapper&#10;public interface $!{tableName} {&#10;&#10;    $!{tableName} MAPPER = Mappers.getMapper($!{tableName}.class);&#10;    &#10;    /**&#10;     * po =&gt; dto&#10;     *&#10;     * @param po 实体类&#10;     * @return dto传输类&#10;     */&#10;    $!{tableInfo.name}ResultDTO po2dto($!{tableInfo.name}PO po);&#10;    &#10;    /**&#10;     * pos =&gt; dtos&#10;     *&#10;     * @param pos 实体类集合&#10;     * @return dtos传输类集合&#10;     */&#10;    List&lt;$!{tableInfo.name}ResultDTO&gt; pos2dtos(List&lt;$!{tableInfo.name}PO&gt; pos);&#10;    &#10;    /**&#10;     * dto =&gt; po&#10;     *&#10;     * @param dto 传输类&#10;     * @return po实体类&#10;     */&#10;    $!{tableInfo.name}PO dto2po($!{tableInfo.name}ParamsDTO dto);&#10;    &#10;    /**&#10;     * dtos =&gt; pos&#10;     *&#10;     * @param dtos 传输类集合&#10;     * @return pos实体类集合&#10;     */&#10;    List&lt;$!{tableInfo.name}PO&gt; dtos2pos(List&lt;$!{tableInfo.name}ParamsDTO&gt; dtos);&#10;    &#10;    /**&#10;     * 使用dto更新po&#10;     * &#10;     * @param dto 传输类&#10;     * @param po  实体类&#10;     */&#10;    void updatePoFromDto($!{tableInfo.name}ParamsDTO dto, @MappingTarget $!{tableInfo.name}PO po);&#10;}" />
                    <option name="name" value="Mapper.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Repository&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/repository&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}repository;&#10;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}PO;&#10;import cn.ermerson.supports.dsl.BaseJpaDslRepository;&#10;&#10;/**&#10; * $!{tableInfo.name}数据库访问层&#10; *&#10; * @author $!author&#10; */&#10;public interface $!{tableName} extends BaseJpaDslRepository&lt;$!{tableInfo.name}PO, String&gt;{&#10;&#10;}" />
                    <option name="name" value="Repository.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}PO;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ParamsDTO;&#10;import org.springframework.data.domain.Page;&#10;import cn.ermerson.supports.jpa.SortParamsDTO;&#10;import cn.ermerson.supports.jpa.PageParamsDTO;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.name}Service&#10; *&#10; * @author $!author&#10; */&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 查询全部记录&#10;     * @param searchParamsDTO 搜索dto&#10;     * @param sortParamsDTO 排序dto&#10;     * @return 记录列表&#10;     */&#10;    List&lt;$!{tableInfo.name}PO&gt; readAll($!{tableInfo.name}ParamsDTO searchParamsDTO, SortParamsDTO sortParamsDTO);&#10;&#10;    /**&#10;     * 分页获取记录&#10;     *&#10;     * @param searchParamsDTO 查询DTO&#10;     * @param pageParamsDTO 分页DTO&#10;     * @param sortParamsDTO 排序DTO&#10;     * @return 分页记录&#10;     */&#10;    Page&lt;$!{tableInfo.name}PO&gt; readAllByPage($!{tableInfo.name}ParamsDTO searchParamsDTO, PageParamsDTO pageParamsDTO, SortParamsDTO sortParamsDTO);&#10;&#10;    /**&#10;     * 创建记录&#10;     *&#10;     * @param dto 传输类&#10;     */&#10;    void create($!{tableInfo.name}ParamsDTO dto);&#10;    &#10;    /**&#10;     * 更新记录&#10;     *&#10;     * @param dto 传输类&#10;     */&#10;    void update($!{tableInfo.name}ParamsDTO dto);&#10;    &#10;    /**&#10;     * 删除记录&#10;     *&#10;     * @param dto 传输类&#10;     */&#10;    void delete($!{tableInfo.name}ParamsDTO dto);&#10;}" />
                    <option name="name" value="Service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;#set($repositoryName=$tool.append($!tool.firstLowerCase($!{tableInfo.name}),'Repository'))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}PO;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ParamsDTO;&#10;import $!{tableInfo.savePackageName}.repository.$!{tableInfo.name}Repository;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.data.domain.Page;&#10;import cn.ermerson.supports.jpa.PageParamsDTO;&#10;import com.querydsl.core.types.Predicate;&#10;import $!{tableInfo.savePackageName}.po.Q$!{tableInfo.name}PO;&#10;import cn.ermerson.supports.jpa.SortParamsDTO;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;&#10;import org.springframework.stereotype.Service;&#10;import com.google.common.collect.Lists;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.data.domain.Pageable;&#10;&#10;import javax.annotation.Resource;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableName}&#10; *&#10; * @author $!author&#10; */&#10;@Service&#10;public class $!{tableName} implements $!{tableInfo.name}Service {&#10;&#10;    @Resource&#10;    private $!{tableInfo.name}Repository $!{repositoryName};&#10;&#10;    @Override&#10;    public List&lt;$!{tableInfo.name}PO&gt; readAll($!{tableInfo.name}ParamsDTO searchParamsDTO, SortParamsDTO sortParamsDTO){&#10;        Q$!{tableInfo.name}PO q$!{tableInfo.name}PO = Q$!{tableInfo.name}PO.$!tool.firstLowerCase($!{tableInfo.name})PO;&#10;        &#10;        // 开启谓语查询条件&#10;        Predicate predicate = q$!{tableInfo.name}PO.id.isNotNull();&#10;        &#10;        // TODO&#10;        // 进行搜索条件的选取加入&#10;        // demo:&#10;        // String name=searchParamsDTO.getName();&#10;        // if(!StringUtils.isEmpty(name)){&#10;        //     predicate = ExpressionUtils.and(predicate, q$!{tableInfo.name}PO.name.like(&quot;%&quot; + name + &quot;%&quot;));&#10;        // }&#10;     &#10;        // 排序&#10;        Sort sort = sortParamsDTO.getSort();&#10;        if (null == sort) {&#10;            // TODO&#10;            // 如果未给定初始排序顺序，则自行增加&#10;            // demo:&#10;            // sort = new Sort(new Sort.Order(Sort.Direction.DESC, &quot;createdDate&quot;));&#10;        }&#10;        &#10;        // 执行Iterable转换List&#10;        List&lt;$!{tableInfo.name}PO&gt; list = Lists.newArrayList($!{repositoryName}.findAll(predicate, sort).iterator());&#10;        return list;&#10;    }&#10;    &#10;    @Override&#10;    public Page&lt;$!{tableInfo.name}PO&gt; readAllByPage($!{tableInfo.name}ParamsDTO searchParamsDTO, PageParamsDTO pageParamsDTO, SortParamsDTO sortParamsDTO){&#10;        Q$!{tableInfo.name}PO q$!{tableInfo.name}PO = Q$!{tableInfo.name}PO.$!tool.firstLowerCase($!{tableInfo.name})PO;&#10;        &#10;        // 开启谓语查询条件&#10;        Predicate predicate = q$!{tableInfo.name}PO.id.isNotNull();&#10;        &#10;        // TODO&#10;        // 进行搜索条件的选取加入&#10;        // demo:&#10;        // String name=searchParamsDTO.getName();&#10;        // if(!StringUtils.isEmpty(name)){&#10;        //     predicate = ExpressionUtils.and(predicate, q$!{tableInfo.name}PO.name.like(&quot;%&quot; + name + &quot;%&quot;));&#10;        // }&#10;     &#10;        // 排序&#10;        Sort sort = sortParamsDTO.getSort();&#10;        if (null == sort) {&#10;            // TODO&#10;            // 如果未给定初始排序顺序，则自行增加&#10;            // demo:&#10;            // sort = new Sort(new Sort.Order(Sort.Direction.DESC, &quot;createdDate&quot;));&#10;        }&#10;        &#10;        // 执行返回&#10;        Pageable pageable = pageParamsDTO.getPageableWithSort(sort);&#10;        return $!{repositoryName}.findAll(predicate, pageable);&#10;    }&#10;    &#10;    @Override&#10;    public void create($!{tableInfo.name}ParamsDTO dto){&#10;        $!{repositoryName}.save($!{tableInfo.name}Mapper.MAPPER.dto2po(dto));&#10;    }&#10;    &#10;    @Override&#10;    public void update($!{tableInfo.name}ParamsDTO dto) {&#10;        $!{tableInfo.name}PO po = $!{repositoryName}.findOne(dto.getId());&#10;        $!{tableInfo.name}Mapper.MAPPER.updatePoFromDto(dto, po);&#10;        $!{repositoryName}.save(po);&#10;    }&#10;    &#10;    @Override&#10;    public void delete($!{tableInfo.name}ParamsDTO dto) {&#10;        $!{repositoryName}.delete(dto.getId());&#10;    }&#10;    &#10;}" />
                    <option name="name" value="ServiceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;&#10;##调用获取html路径&#10;#generateHtmlPath(${tableInfo.obj.name})&#10;##调用获取权限字符串&#10;#generatePermission(${tableInfo.obj.name})&#10;&#10;##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;#set($serviceName=$tool.append($!tool.firstLowerCase($!{tableInfo.name}),'Service'))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}PO;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ResultDTO;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ParamsDTO;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import cn.ermerson.supports.jpa.*;&#10;import cn.ermerson.supports.result.ApiResultDTO;&#10;import cn.ermerson.supports.result.ApiResultGenerator;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.apache.shiro.authz.annotation.RequiresPermissions;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.servlet.ModelAndView;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableName}&#10; *&#10; * @author $!author&#10; */&#10;@Controller&#10;@RequestMapping(&quot;/admin$!{htmlPath}&quot;)&#10;@Slf4j&#10;public class $!{tableName} {&#10;    &#10;    @Autowired&#10;    private $!{tableInfo.name}Service $!{serviceName};&#10;&#10;    /**&#10;     * 对应界面展示&#10;     *&#10;     * @return 页面&#10;     */&#10;    @RequiresPermissions($!{permission}:manage)&#10;    @RequestMapping(method = RequestMethod.GET)&#10;    public ModelAndView view() {&#10;        return new ModelAndView(TODO);&#10;    }&#10;    &#10;    /**&#10;     * 获取全部信息列表&#10;     *&#10;     * @param searchDTO     查询参数&#10;     * @param sortParamsDTO 排序参数&#10;     * @return 信息列表&#10;     */&#10;    @RequiresPermissions($!{permission}:view)&#10;    @RequestMapping(value = &quot;/readAll&quot;, method = RequestMethod.GET)&#10;    @ResponseBody&#10;    public ApiResultDTO readAll($!{tableInfo.name}ParamsDTO searchDTO, SortParamsDTO sortParamsDTO) {&#10;        ApiResultDTO apiResultDTO;&#10;        try {&#10;            List&lt;$!{tableInfo.name}ResultDTO&gt; list = $!{tableInfo.name}Mapper.MAPPER.pos2dtos($!{serviceName}.readAll(searchDTO, sortParamsDTO));&#10;            apiResultDTO = ApiResultGenerator.create(0, &quot;获取信息列表成功!&quot;, list);&#10;        } catch (Exception e) {&#10;            log.error(&quot;获取信息列表失败:{}&quot;, e);&#10;            apiResultDTO = ApiResultGenerator.create(-1, &quot;获取信息列表失败!&quot;);&#10;        }&#10;        return apiResultDTO;&#10;    }&#10;    &#10;    /**&#10;     * 分页获取信息列表&#10;     *&#10;     * @param searchDTO 查询参数&#10;     * @param pageParamsDTO 分页参数&#10;     * @param sortParamsDTO 排序参数&#10;     * @return 分页数据&#10;     */&#10;    @RequiresPermissions($!{permission}:view)&#10;    @RequestMapping(value = &quot;/readAllByPage&quot;, method = RequestMethod.GET)&#10;    @ResponseBody&#10;    public ApiResultDTO readAllByPage($!{tableInfo.name}ParamsDTO searchDTO, PageParamsDTO pageParamsDTO, SortParamsDTO sortParamsDTO) {&#10;        ApiResultDTO apiResultDTO;&#10;        try {&#10;            Page&lt;$!{tableInfo.name}PO&gt; pagePos = $!{serviceName}.readAllByPage(searchDTO, pageParamsDTO, sortParamsDTO);&#10;            PageResultDTO&lt;$!{tableInfo.name}ResultDTO&gt; pageResultDTO = PageResultGenerator.convert(pagePos, new PageConvertCallBack&lt;$!{tableInfo.name}ResultDTO, $!{tableInfo.name}PO&gt;() {&#10;                @Override&#10;                public List&lt;$!{tableInfo.name}ResultDTO&gt; exec(List&lt;$!{tableInfo.name}PO&gt; list) {&#10;                    return $!{tableInfo.name}Mapper.MAPPER.pos2dtos(list);&#10;                }&#10;            });&#10;            apiResultDTO = ApiResultGenerator.create(0, &quot;分页数据获取成功!&quot;, pageResultDTO);&#10;        } catch (Exception e) {&#10;            log.error(&quot;分页数据获取失败:{}&quot;, e);&#10;            apiResultDTO = ApiResultGenerator.create(-1, &quot;分页数据获取失败!&quot;);&#10;        }&#10;        return apiResultDTO;&#10;    }&#10;    &#10;    /**&#10;     * 创建&#10;     *&#10;     * @param dto 传输类&#10;     * @return 执行反馈&#10;     */&#10;    @RequiresPermissions($!{permission}:create)&#10;    @RequestMapping(value = &quot;/create&quot;, method = RequestMethod.POST)&#10;    @ResponseBody&#10;    public ApiResultDTO create($!{tableInfo.name}ParamsDTO dto) {&#10;        ApiResultDTO apiResultDTO;&#10;        try {&#10;            $!{serviceName}.create(dto);&#10;            apiResultDTO = ApiResultGenerator.create(0, &quot;创建记录成功!&quot;);&#10;        } catch (Exception e) {&#10;            log.error(&quot;创建记录失败:{}&quot;, e);&#10;            apiResultDTO = ApiResultGenerator.create(-1, &quot;创建记录失败!&quot;);&#10;        }&#10;        return apiResultDTO;&#10;    }&#10;    &#10;    /**&#10;     * 更新&#10;     *&#10;     * @param dto 传输类&#10;     * @return 执行反馈&#10;     */&#10;    @RequiresPermissions($!{permission}:update)&#10;    @RequestMapping(value = &quot;/update&quot;, method = RequestMethod.POST)&#10;    @ResponseBody&#10;    public ApiResultDTO update($!{tableInfo.name}ParamsDTO dto) {&#10;        ApiResultDTO apiResultDTO;&#10;        try {&#10;            $!{serviceName}.update(dto);&#10;            apiResultDTO = ApiResultGenerator.create(0, &quot;更新记录成功!&quot;);&#10;        } catch (Exception e) {&#10;            log.error(&quot;更新记录失败:{}&quot;, e);&#10;            apiResultDTO = ApiResultGenerator.create(-1, &quot;更新记录失败!&quot;);&#10;        }&#10;        return apiResultDTO;&#10;    }&#10;&#10;    /**&#10;     * 删除&#10;     *&#10;     * @param dto 传输类&#10;     * @return 执行反馈&#10;     */&#10;    @RequiresPermissions($!{permission}:delete)&#10;    @RequestMapping(value = &quot;/delete&quot;, method = RequestMethod.POST)&#10;    @ResponseBody&#10;    public ApiResultDTO delete($!{tableInfo.name}ParamsDTO dto) {&#10;        ApiResultDTO apiResultDTO;&#10;        try {&#10;            $!{serviceName}.delete(dto);&#10;            apiResultDTO = ApiResultGenerator.create(0, &quot;删除记录成功!&quot;);&#10;        } catch (Exception e) {&#10;            log.error(&quot;删除记录失败:{}&quot;, e);&#10;            apiResultDTO = ApiResultGenerator.create(-1, &quot;删除记录失败!&quot;);&#10;        }&#10;        return apiResultDTO;&#10;    }&#10;}" />
                    <option name="name" value="Controller.java" />
                  </Template>
                  <Template>
                    <option name="code" value="" />
                    <option name="name" value="PO.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;&#10;##调用获取html路径&#10;#generateHtmlPath(${tableInfo.obj.name})&#10;##调用获取权限字符串&#10;#generatePermission(${tableInfo.obj.name})&#10;&#10;##设置回调&#10;##保存文件名&#10;$!callback.setFileName($tool.append(&quot;&quot;, &quot;view.html&quot;))&#10;##保存路径&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, $!{htmlPath}))&#10;&#10;##设置参数dto数组&#10;#set($paramsColumnNames=$tool.newArrayList())&#10;#set($paramsColumnComments=$tool.newArrayList())&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.ext.paramsDisable)&#10;        #if($column.name.equals($tableInfo.pkColumn.get(0).name))&#10;        #else&#10;            $tool.call($paramsColumnNames.add($column.name))&#10;            $tool.call($paramsColumnComments.add($column.comment))&#10;        #end&#10;    #end&#10;#end&#10;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&#10;      xmlns:shiro=&quot;http://www.pollix.at/thymeleaf/shiro&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&#10;    &#10;&lt;head&gt;&#10;    // TODO 更改标题&#10;    &lt;title&gt;XX管理&lt;/title&gt;&#10;    &lt;style type=&quot;text/css&quot;&gt;&#10;        [v-cloak] {&#10;            display: none;&#10;        !important;&#10;        }&#10;&#10;        /* 搜索框宽度 */&#10;        .search-input-width {&#10;            width: 120px;&#10;        }&#10;&#10;        /* 竖分割线 */&#10;        .search-divider {&#10;            color: #F7F7F8;&#10;            font-weight: bold;&#10;            margin-left: 1px;&#10;            margin-right: 1px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;    &#10;&lt;body&gt;&#10;&lt;div id=&quot;app&quot; v-cloak&gt;&#10;    &lt;hidden ref=&quot;shiroUpdate&quot; shiro:hasPermission=&quot;$!{permission}:update&quot;&gt;&lt;/hidden&gt;&#10;    &lt;hidden ref=&quot;shiroDelete&quot; shiro:hasPermission=&quot;$!{permission}:delete&quot;&gt;&lt;/hidden&gt;&#10;    &#10;    &lt;!-- 搜索区域 --&gt;&#10;    &lt;card style=&quot;margin-bottom: 8px;&quot; padding=&quot;10&quot;&gt;&#10;        &lt;div&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if($column.ext.searchEnable)&#10;&#10;            &lt;span&gt;${column.comment}:&lt;/span&gt;&#10;            &lt;i-input class=&quot;search-input-width&quot; size=&quot;small&quot; v-model=&quot;search.${column.name}&quot; placeholder=&quot;${column.comment}...&quot;&gt;&lt;/i-input&gt;&#10;            &#10;            &lt;span class=&quot;search-divider&quot;&gt;|&lt;/span&gt;&#10;    #end&#10;#end&#10;&#10;            &lt;i-button style=&quot;margin-right: 5px;&quot; size=&quot;small&quot; type=&quot;warning&quot; @click=&quot;resetSearch&quot;&gt;重置&lt;/i-button&gt;&#10;            &lt;i-button size=&quot;small&quot; type=&quot;primary&quot; @click=&quot;doSearch&quot;&gt;查询&lt;/i-button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/card&gt;&#10;    &#10;    &lt;!-- 列表区域 --&gt;&#10;    &lt;card padding=&quot;0&quot;&gt;&#10;        &lt;p slot=&quot;title&quot;&gt;&#10;        &lt;/p&gt;&#10;        &#10;        &lt;!-- 新增按钮 --&gt;&#10;        &lt;i-button shiro:hasPermission=&quot;$!{permission}:create&quot; slot=&quot;extra&quot; size=&quot;small&quot; type=&quot;success&quot; @click=&quot;showCreateModal&quot;&gt;新增&lt;/i-button&gt;&#10;        &#10;        &lt;!-- 展示列表 --&gt;&#10;        &lt;i-table ref=&quot;table&quot; highlight-row stripe border size=&quot;small&quot; height=&quot;560&quot; :columns=&quot;columns&quot; :data=&quot;records&quot; @on-sort-change=&quot;sortChange&quot;&gt;&lt;/i-table&gt;&#10;        &#10;    &lt;/card&gt;&#10;    &#10;    &lt;!-- 新增/编辑modal --&gt;&#10;    &lt;modal width=&quot;600&quot; v-model=&quot;modal.show&quot; :title=&quot;modal.title&quot; v-on:on-visible-change=&quot;resetForm&quot;&gt;&#10;        &lt;Row type=&quot;flex&quot;&gt;&#10;            &lt;i-form style=&quot;width: 100%&quot; ref=&quot;createOrUpdateForm&quot; :model=&quot;domain&quot; :rules=&quot;domainRuleValidator&quot; :label-width=&quot;80&quot;&gt;&#10;#foreach($name in $paramsColumnNames)&#10;        #set($index=${velocityCount} - 1)&#10;        #if(${velocityCount}%2==1)&#10;        &#10;                &lt;row&gt;&#10;        #end&#10;        &#10;                    &lt;i-col :lg=&quot;12&quot;&gt;&#10;                        &lt;!-- ${paramsColumnComments.get($index)} --&gt; &#10;                        &lt;Form-Item autocomplete=&quot;off&quot; label=&quot;${paramsColumnComments.get($index)}:&quot; prop=&quot;${name}&quot;&gt;&#10;                            &lt;i-input type=&quot;text&quot; v-model=&quot;domain.${name}&quot;&#10;                                     placeholder=&quot;${paramsColumnComments.get($index)}...&quot;&gt;&lt;/i-input&gt;&#10;                        &lt;/Form-Item&gt;&#10;                    &lt;/i-col&gt;&#10;        #if(${velocityCount}%2==0)&#10;        &#10;                &lt;/row&gt;&#10;        #end&#10;        #if(${velocityCount}%2==1&amp;&amp;$foreach.last)&#10;        &lt;/row&gt;&#10;        #end&#10;#end&#10;&#10;            &lt;/i-form&gt;&#10;        &lt;/Row&gt;&#10;        &lt;div slot=&quot;footer&quot;&gt;&#10;            &lt;i-button type=&quot;primary&quot; size=&quot;large&quot; @click=&quot;createOrUpdateConfirm&quot;&gt;确定&lt;/i-button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/modal&gt;&#10;&lt;/div&gt;&#10;&lt;/body&gt;&#10;    &#10;&lt;!-- inline scripts related to this page --&gt;&#10;&lt;script type=&quot;text/javascript&quot; th:inline=&quot;javascript&quot;&gt;&#10;    /*&lt;![CDATA[*/&#10;    let scripts = [null,&#10;        null&#10;    ]&#10;    &#10;    $('.page-content-area')&#10;        .ace_ajax(&#10;            'loadScripts',&#10;            scripts,&#10;            function () {&#10;                // VUE&#10;                let app = new Vue({&#10;                    el: '#app',&#10;                    data:{&#10;                        // 模态框&#10;                        modal: {&#10;                            // 模态框标题&#10;                            title:'',&#10;                            // 模态框显示状态&#10;                            show:false,&#10;                            // true为新增,false为编辑&#10;                            type:true&#10;                        },&#10;                        // 搜索字段&#10;                        search: {&#10;                            #foreach($column in $tableInfo.fullColumn)&#10;                                #if($column.ext.searchEnable)&#10;                                &#10;                            //${column.comment}&#10;                            ${column.name}: '',&#10;                                #end&#10;                            #end&#10;                            &#10;                        },&#10;                        // 排序区域&#10;                        sort: {&#10;                            sortField: '',&#10;                            sortDirection: ''&#10;                        },&#10;                        // form表单域字段&#10;                        domain: {&#10;                            #foreach($column in $tableInfo.fullColumn)&#10;                                #if(!$column.ext.paramsDisable)&#10;                                &#10;                            //${column.comment}&#10;                            ${column.name}: '',&#10;                                #end&#10;                            #end&#10;                            &#10;                        },&#10;                        // 表单域验证&#10;                        domainRuleValidator: {&#10;                            &#10;                        },&#10;                        // 表头定义&#10;                        columns: [&#10;                            // 序号&#10;                            {&#10;                                type: 'index',&#10;                                width: 50,&#10;                                align: 'center',&#10;                            },&#10;                            #foreach($column in $tableInfo.fullColumn)&#10;                                #if(!$column.ext.resultDisable)&#10;                                #if(!$column.name.equals($tableInfo.pkColumn.get(0).name))&#10;                                &#10;                            {&#10;                                title:'${column.comment}',&#10;                                key:'${column.name}',&#10;                                align: 'center'&#10;                            },   &#10;                                #end&#10;                                #end&#10;                            #end&#10;                            &#10;                            {&#10;                                title:'操作',&#10;                                key: 'action',&#10;                                width: 160,&#10;                                align: 'center',&#10;                                render: (h, params) =&gt; {&#10;                                    // 编辑按钮&#10;                                    let updateBtn = h('Button', {&#10;                                        props: {&#10;                                            type: 'success',&#10;                                            size: 'small'&#10;                                        },&#10;                                        style: {&#10;                                            marginRight: '5px'&#10;                                        },&#10;                                        on: {&#10;                                            click: () =&gt; {&#10;                                                app.showUpdateModal(params.row);&#10;                                            }&#10;                                        }&#10;                                    }, '编辑')&#10;&#10;                                    // 删除按钮&#10;                                    let deleteBtn = h('Button', {&#10;                                        props: {&#10;                                            type: 'error',&#10;                                            size: 'small'&#10;                                        },&#10;                                        on: {&#10;                                            click: () =&gt; {&#10;                                                let modal=app.$Modal&#10;                                                modal.confirm({&#10;                                                    title: '删除提醒',&#10;                                                    content: '确认删除该条记录!',&#10;                                                    okText: '删除',&#10;                                                    cancelText: '取消',&#10;                                                    onOk: () =&gt; {&#10;                                                        // 执行删除逻辑&#10;                                                        app.delete(params.row.id)&#10;                                                    }&#10;                                                })&#10;                                            }&#10;                                        }&#10;                                    }, '删除')&#10;&#10;                                    // 按钮组&#10;                                    let btns = [];&#10;&#10;                                    if (checkPermission(app.$refs.shiroUpdate)) {&#10;                                        btns.push(updateBtn)&#10;                                    }&#10;&#10;                                    if (checkPermission(app.$refs.shiroDelete)) {&#10;                                        btns.push(deleteBtn)&#10;                                    }&#10;&#10;                                    return h('div', btns);&#10;                                }&#10;                            }&#10;                        ],&#10;                        // 记录接收&#10;                        records: [],&#10;                    },&#10;                    methods:{&#10;                        // 加载数据&#10;                        getData() {&#10;                            let url = /*[[@{/admin$!{htmlPath}/readAll}]]*/ '获取全部数据'&#10;                            axios.get(url, {&#10;                                // 封装get请求参数&#10;                                params: assembleGetParams(this.sort, this.search),&#10;                            }).then(function (response) {&#10;                                let result = response.data;&#10;                                if (0 === result.code) {&#10;                                    // 成功&#10;                                    app.records = result.content&#10;                                } else {&#10;                                    // 失败&#10;                                    let message=app.$Message&#10;                                    message.error(result.message);&#10;                                }&#10;                            }).catch(function (error) {&#10;                                console.log(error)&#10;                            });&#10;                        },&#10;                        // 排序变更&#10;                        sortChange(val) {&#10;                            this.sort.sortField = val.key&#10;                            this.sort.sortDirection = val.order&#10;                            this.getData()&#10;                        },&#10;                        // 执行搜索&#10;                        doSearch() {&#10;                            this.getData()&#10;                        },&#10;                        // 执行搜索条件重置&#10;                        resetSearch() {&#10;                            resetObj(this.search)&#10;                        },&#10;                        // 显示新增模态框&#10;                        showCreateModal() {&#10;                            // 设置模态框属性&#10;                            this.modal.title = '新增记录'&#10;                            this.modal.show = true&#10;                            this.modal.type = true&#10;                        },&#10;                        // 显示编辑模态框&#10;                        showUpdateModal(row) {&#10;                            // 设置域内容&#10;                            #foreach($column in $tableInfo.fullColumn)&#10;                                #if(!$column.ext.paramsDisable)&#10;                            &#10;                            // ${column.comment}&#10;                            this.domain.${column.name}=row.${column.name}&#10;                                #end&#10;                            #end    &#10;&#10;                            // 设置模态框属性&#10;                            this.modal.title = '编辑记录'&#10;                            this.modal.show = true&#10;                            this.modal.type = false&#10;                        },&#10;                        // 显示删除模态框&#10;                        delete(id){&#10;                            let url = /*[[@{/admin$!{htmlPath}/delete}]]*/ '根据ID删除用户'&#10;                            let params = new URLSearchParams();&#10;                            params.append('id', id);&#10;                            axios.post(url, params).then(function (response) {&#10;                                let result = response.data&#10;                                if (0 === result.code) {&#10;                                    app.getData();&#10;                                } else {&#10;                                    // 失败&#10;                                    let message=app.$Message&#10;                                    message.error(result.message);&#10;                                }&#10;                            }).catch(function (error) {&#10;                                    console.log(error)&#10;                                }&#10;                            )&#10;                        },&#10;                        // 新增或修改确认&#10;                        createOrUpdateConfirm() {&#10;                            let validForm=this.$refs.createOrUpdateForm&#10;                            validForm.validate((valid) =&gt; {&#10;                                if (valid) {&#10;                                    let url = '';&#10;                                    let params = new URLSearchParams();&#10;                                    if (true === this.modal.type) {&#10;                                        // 新增&#10;                                        url = /*[[@{/admin$!{htmlPath}/create}]]*/ '创建用户'&#10;                                    } else {&#10;                                        // 修改&#10;                                        url = /*[[@{/admin/$!{htmlPath}/update}]]*/ '更新用户'&#10;                                        params.append('id',this.domain.id)&#10;                                    }&#10;                                    #foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.ext.paramsDisable&amp;&amp;!$column.name.equals($tableInfo.pkColumn.get(0).name))&#10;                            &#10;                                        // ${column.comment}&#10;                                        params.append('${column.name}', this.domain.${column.name});&#10;                                        #end&#10;#end  &#10;&#10;                                    axios.post(url, params).then(function (response) {&#10;                                        let result = response.data&#10;                                        if (0 === result.code) {&#10;                                            app.getData();&#10;                                        } else {&#10;                                            // 失败&#10;                                            let message=app.$Message&#10;                                            message.error(result.message);&#10;                                        }&#10;                                    }).catch(function (error) {&#10;                                            console.log(error)&#10;                                        }&#10;                                    )&#10;                                    // 恢复状态&#10;                                    this.modal.show = false&#10;                                }&#10;                                })&#10;                        },&#10;                        // 重置表单域&#10;                        resetForm(val) {&#10;                            if (!val) {&#10;                                // 重置表单验证状态&#10;                                this.$refs.createOrUpdateForm.resetFields()&#10;                            }&#10;                        },&#10;                    },&#10;                    mounted() {&#10;                        this.getData();&#10;                    }&#10;                })&#10;    &#10;                // 页面加载完成&#10;                $(document).one('ajaxloadstart.page', function (e) {&#10;                });&#10;            })&#10;        /*]]&gt;*/&#10;&lt;/script&gt;&#10;&lt;/html&gt;" />
                    <option name="name" value="NoPagingView.html" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;&#10;##调用获取html路径&#10;#generateHtmlPath(${tableInfo.obj.name})&#10;##调用获取权限字符串&#10;#generatePermission(${tableInfo.obj.name})&#10;&#10;##设置回调&#10;##保存文件名&#10;$!callback.setFileName($tool.append(&quot;&quot;, &quot;view.html&quot;))&#10;##保存路径&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, $!{htmlPath}))&#10;&#10;##设置参数dto数组&#10;#set($paramsColumnNames=$tool.newArrayList())&#10;#set($paramsColumnComments=$tool.newArrayList())&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.ext.paramsDisable)&#10;        #if($column.name.equals($tableInfo.pkColumn.get(0).name))&#10;        #else&#10;            $tool.call($paramsColumnNames.add($column.name))&#10;            $tool.call($paramsColumnComments.add($column.comment))&#10;        #end&#10;    #end&#10;#end&#10;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&#10;      xmlns:shiro=&quot;http://www.pollix.at/thymeleaf/shiro&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&#10;    &#10;&lt;head&gt;&#10;    // TODO 更改标题&#10;    &lt;title&gt;XX管理&lt;/title&gt;&#10;    &lt;style type=&quot;text/css&quot;&gt;&#10;        [v-cloak] {&#10;            display: none;&#10;        !important;&#10;        }&#10;&#10;        /* 搜索框宽度 */&#10;        .search-input-width {&#10;            width: 120px;&#10;        }&#10;&#10;        /* 竖分割线 */&#10;        .search-divider {&#10;            color: #F7F7F8;&#10;            font-weight: bold;&#10;            margin-left: 1px;&#10;            margin-right: 1px;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;    &#10;&lt;body&gt;&#10;&lt;div id=&quot;app&quot; v-cloak&gt;&#10;    &lt;hidden ref=&quot;shiroUpdate&quot; shiro:hasPermission=&quot;$!{permission}:update&quot;&gt;&lt;/hidden&gt;&#10;    &lt;hidden ref=&quot;shiroDelete&quot; shiro:hasPermission=&quot;$!{permission}:delete&quot;&gt;&lt;/hidden&gt;&#10;    &#10;    &lt;!-- 搜索区域 --&gt;&#10;    &lt;card style=&quot;margin-bottom: 8px;&quot; padding=&quot;10&quot;&gt;&#10;        &lt;div&gt;&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if($column.ext.searchEnable)&#10;&#10;            &lt;span&gt;${column.comment}:&lt;/span&gt;&#10;            &lt;i-input class=&quot;search-input-width&quot; size=&quot;small&quot; v-model=&quot;search.${column.name}&quot; placeholder=&quot;${column.comment}...&quot;&gt;&lt;/i-input&gt;&#10;            &#10;            &lt;span class=&quot;search-divider&quot;&gt;|&lt;/span&gt;&#10;    #end&#10;#end&#10;&#10;            &lt;i-button style=&quot;margin-right: 5px;&quot; size=&quot;small&quot; type=&quot;warning&quot; @click=&quot;resetSearch&quot;&gt;重置&lt;/i-button&gt;&#10;            &lt;i-button size=&quot;small&quot; type=&quot;primary&quot; @click=&quot;doSearch&quot;&gt;查询&lt;/i-button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/card&gt;&#10;    &#10;    &lt;!-- 列表区域 --&gt;&#10;    &lt;card padding=&quot;0&quot;&gt;&#10;        &lt;p slot=&quot;title&quot;&gt;&#10;        &lt;/p&gt;&#10;        &#10;        &lt;!-- 新增按钮 --&gt;&#10;        &lt;i-button shiro:hasPermission=&quot;$!{permission}:create&quot; slot=&quot;extra&quot; size=&quot;small&quot; type=&quot;success&quot; @click=&quot;showCreateModal&quot;&gt;新增&lt;/i-button&gt;&#10;        &#10;        &lt;!-- 展示列表 --&gt;&#10;        &lt;i-table ref=&quot;table&quot; highlight-row stripe border size=&quot;small&quot; height=&quot;520&quot; :columns=&quot;columns&quot; :data=&quot;records&quot; @on-sort-change=&quot;sortChange&quot;&gt;&lt;/i-table&gt;&#10;        &#10;        &lt;!-- 分页控制区 --&gt;&#10;        &lt;div class=&quot;center&quot;&gt;&#10;            &lt;Page id=&quot;pageControl&quot; show-sizer show-total style=&quot;margin-top: 5px;margin-bottom: 5px;&quot;&#10;                  placement=&quot;top&quot;&#10;                  size=&quot;small&quot;&#10;                  :current=&quot;page.currentPage&quot;&#10;                  :page-size=&quot;page.pageSize&quot;&#10;                  :total=&quot;page.total&quot;&#10;                  @on-change=&quot;pageChange&quot;&#10;                  @on-page-size-change=&quot;pageChangeSize&quot;&gt;&#10;            &lt;/Page&gt;&#10;        &lt;/div&gt;&#10;    &lt;/card&gt;&#10;    &#10;    &lt;!-- 新增/编辑modal --&gt;&#10;    &lt;modal width=&quot;600&quot; v-model=&quot;modal.show&quot; :title=&quot;modal.title&quot; v-on:on-visible-change=&quot;resetForm&quot;&gt;&#10;        &lt;Row type=&quot;flex&quot;&gt;&#10;            &lt;i-form style=&quot;width: 100%&quot; ref=&quot;createOrUpdateForm&quot; :model=&quot;domain&quot; :rules=&quot;domainRuleValidator&quot; :label-width=&quot;80&quot;&gt;&#10;#foreach($name in $paramsColumnNames)&#10;        #set($index=${velocityCount} - 1)&#10;        #if(${velocityCount}%2==1)&#10;        &#10;                &lt;row&gt;&#10;        #end&#10;        &#10;                    &lt;i-col :lg=&quot;12&quot;&gt;&#10;                        &lt;!-- ${paramsColumnComments.get($index)} --&gt; &#10;                        &lt;Form-Item autocomplete=&quot;off&quot; label=&quot;${paramsColumnComments.get($index)}:&quot; prop=&quot;${name}&quot;&gt;&#10;                            &lt;i-input type=&quot;text&quot; v-model=&quot;domain.${name}&quot;&#10;                                     placeholder=&quot;${paramsColumnComments.get($index)}...&quot;&gt;&lt;/i-input&gt;&#10;                        &lt;/Form-Item&gt;&#10;                    &lt;/i-col&gt;&#10;        #if(${velocityCount}%2==0)&#10;        &#10;                &lt;/row&gt;&#10;        #end&#10;        #if(${velocityCount}%2==1&amp;&amp;$foreach.last)&#10;        &lt;/row&gt;&#10;        #end&#10;#end&#10;&#10;            &lt;/i-form&gt;&#10;        &lt;/Row&gt;&#10;        &lt;div slot=&quot;footer&quot;&gt;&#10;            &lt;i-button type=&quot;primary&quot; size=&quot;large&quot; @click=&quot;createOrUpdateConfirm&quot;&gt;确定&lt;/i-button&gt;&#10;        &lt;/div&gt;&#10;    &lt;/modal&gt;&#10;&lt;/div&gt;&#10;&lt;/body&gt;&#10;    &#10;&lt;!-- inline scripts related to this page --&gt;&#10;&lt;script type=&quot;text/javascript&quot; th:inline=&quot;javascript&quot;&gt;&#10;    /*&lt;![CDATA[*/&#10;    let scripts = [null,&#10;        null&#10;    ]&#10;    &#10;    $('.page-content-area')&#10;        .ace_ajax(&#10;            'loadScripts',&#10;            scripts,&#10;            function () {&#10;                // VUE&#10;                let app = new Vue({&#10;                    el: '#app',&#10;                    data:{&#10;                        // 模态框&#10;                        modal: {&#10;                            // 模态框标题&#10;                            title:'',&#10;                            // 模态框显示状态&#10;                            show:false,&#10;                            // true为新增,false为编辑&#10;                            type:true&#10;                        },&#10;                        // 搜索字段&#10;                        search: {&#10;                            #foreach($column in $tableInfo.fullColumn)&#10;                                #if($column.ext.searchEnable)&#10;                                &#10;                            //${column.comment}&#10;                            ${column.name}: '',&#10;                                #end&#10;                            #end&#10;                            &#10;                        },&#10;                        // 分页参数区&#10;                        page: {&#10;                            currentPage: 1,&#10;                            pageSize: 30,&#10;                            total: 0&#10;                        },&#10;                        // 排序区域&#10;                        sort: {&#10;                            sortField: '',&#10;                            sortDirection: ''&#10;                        },&#10;                        // form表单域字段&#10;                        domain: {&#10;                            #foreach($column in $tableInfo.fullColumn)&#10;                                #if(!$column.ext.paramsDisable)&#10;                                &#10;                            //${column.comment}&#10;                            ${column.name}: '',&#10;                                #end&#10;                            #end&#10;                            &#10;                        },&#10;                        // 表单域验证&#10;                        domainRuleValidator: {&#10;                            &#10;                        },&#10;                        // 表头定义&#10;                        columns: [&#10;                            // 序号&#10;                            {&#10;                                type: 'index',&#10;                                width: 50,&#10;                                align: 'center',&#10;                            },&#10;                            #foreach($column in $tableInfo.fullColumn)&#10;                                #if(!$column.ext.resultDisable)&#10;                                #if(!$column.name.equals($tableInfo.pkColumn.get(0).name))&#10;                                &#10;                            {&#10;                                title:'${column.comment}',&#10;                                key:'${column.name}',&#10;                                align: 'center'&#10;                            },   &#10;                                #end&#10;                                #end&#10;                            #end&#10;                            &#10;                            {&#10;                                title:'操作',&#10;                                key: 'action',&#10;                                width: 160,&#10;                                align: 'center',&#10;                                render: (h, params) =&gt; {&#10;                                    // 编辑按钮&#10;                                    let updateBtn = h('Button', {&#10;                                        props: {&#10;                                            type: 'success',&#10;                                            size: 'small'&#10;                                        },&#10;                                        style: {&#10;                                            marginRight: '5px'&#10;                                        },&#10;                                        on: {&#10;                                            click: () =&gt; {&#10;                                                app.showUpdateModal(params.row);&#10;                                            }&#10;                                        }&#10;                                    }, '编辑')&#10;&#10;                                    // 删除按钮&#10;                                    let deleteBtn = h('Button', {&#10;                                        props: {&#10;                                            type: 'error',&#10;                                            size: 'small'&#10;                                        },&#10;                                        on: {&#10;                                            click: () =&gt; {&#10;                                                let modal=app.$Modal&#10;                                                modal.confirm({&#10;                                                    title: '删除提醒',&#10;                                                    content: '确认删除该条记录!',&#10;                                                    okText: '删除',&#10;                                                    cancelText: '取消',&#10;                                                    onOk: () =&gt; {&#10;                                                        // 执行删除逻辑&#10;                                                        app.delete(params.row.id)&#10;                                                    }&#10;                                                })&#10;                                            }&#10;                                        }&#10;                                    }, '删除')&#10;&#10;                                    // 按钮组&#10;                                    let btns = [];&#10;&#10;                                    if (checkPermission(app.$refs.shiroUpdate)) {&#10;                                        btns.push(updateBtn)&#10;                                    }&#10;&#10;                                    if (checkPermission(app.$refs.shiroDelete)) {&#10;                                        btns.push(deleteBtn)&#10;                                    }&#10;&#10;                                    return h('div', btns);&#10;                                }&#10;                            }&#10;                        ],&#10;                        // 记录接收&#10;                        records: [],&#10;                    },&#10;                    methods:{&#10;                        // 加载数据&#10;                        getData() {&#10;                            let url = /*[[@{/admin$!{htmlPath}/readAllByPage}]]*/ '分页获取全部数据'&#10;                            axios.get(url, {&#10;                                // 封装get请求参数&#10;                                params: assembleGetParams(this.page, this.sort, this.search),&#10;                            }).then(function (response) {&#10;                                let result = response.data;&#10;                                if (0 === result.code) {&#10;                                    // 成功&#10;                                    app.records = result.content.records&#10;                                    app.page.total = result.content.total&#10;                                } else {&#10;                                    // 失败&#10;                                    let message=app.$Message&#10;                                    message.error(result.message);&#10;                                }&#10;                            }).catch(function (error) {&#10;                                console.log(error)&#10;                            });&#10;                        },&#10;                        // 页码变更&#10;                        pageChange(val) {&#10;                            this.page.currentPage = val&#10;                            this.getData()&#10;                        },&#10;                        // 页数变更&#10;                        pageChangeSize(val) {&#10;                            this.page.pageSize = val&#10;                            this.getData()&#10;                        },&#10;                        // 排序变更&#10;                        sortChange(val) {&#10;                            this.sort.sortField = val.key&#10;                            this.sort.sortDirection = val.order&#10;                            this.page.currentPage = 1&#10;                            this.getData()&#10;                        },&#10;                        // 执行搜索&#10;                        doSearch() {&#10;                            this.page.currentPage = 1&#10;                            this.getData()&#10;                        },&#10;                        // 执行搜索条件重置&#10;                        resetSearch() {&#10;                            resetObj(this.search)&#10;                        },&#10;                        // 显示新增模态框&#10;                        showCreateModal() {&#10;                            // 设置模态框属性&#10;                            this.modal.title = '新增记录'&#10;                            this.modal.show = true&#10;                            this.modal.type = true&#10;                        },&#10;                        // 显示编辑模态框&#10;                        showUpdateModal(row) {&#10;                            // 设置域内容&#10;                            #foreach($column in $tableInfo.fullColumn)&#10;                                #if(!$column.ext.paramsDisable)&#10;                            &#10;                            // ${column.comment}&#10;                            this.domain.${column.name}=row.${column.name}&#10;                                #end&#10;                            #end    &#10;&#10;                            // 设置模态框属性&#10;                            this.modal.title = '编辑记录'&#10;                            this.modal.show = true&#10;                            this.modal.type = false&#10;                        },&#10;                        // 显示删除模态框&#10;                        delete(id){&#10;                            let url = /*[[@{/admin$!{htmlPath}/delete}]]*/ '根据ID删除用户'&#10;                            let params = new URLSearchParams();&#10;                            params.append('id', id);&#10;                            axios.post(url, params).then(function (response) {&#10;                                let result = response.data&#10;                                if (0 === result.code) {&#10;                                    app.getData();&#10;                                } else {&#10;                                    // 失败&#10;                                    let message=app.$Message&#10;                                    message.error(result.message);&#10;                                }&#10;                            }).catch(function (error) {&#10;                                    console.log(error)&#10;                                }&#10;                            )&#10;                        },&#10;                        // 新增或修改确认&#10;                        createOrUpdateConfirm() {&#10;                            let validForm=this.$refs.createOrUpdateForm&#10;                            validForm.validate((valid) =&gt; {&#10;                                if (valid) {&#10;                                    let url = '';&#10;                                    let params = new URLSearchParams();&#10;                                    if (true === this.modal.type) {&#10;                                        // 新增&#10;                                        url = /*[[@{/admin$!{htmlPath}/create}]]*/ '创建用户'&#10;                                    } else {&#10;                                        // 修改&#10;                                        url = /*[[@{/admin/$!{htmlPath}/update}]]*/ '更新用户'&#10;                                        params.append('id',this.domain.id)&#10;                                    }&#10;                                    #foreach($column in $tableInfo.fullColumn)&#10;    #if(!$column.ext.paramsDisable&amp;&amp;!$column.name.equals($tableInfo.pkColumn.get(0).name))&#10;                            &#10;                                        // ${column.comment}&#10;                                        params.append('${column.name}', this.domain.${column.name});&#10;                                        #end&#10;#end  &#10;&#10;                                    axios.post(url, params).then(function (response) {&#10;                                        let result = response.data&#10;                                        if (0 === result.code) {&#10;                                            app.getData();&#10;                                        } else {&#10;                                            // 失败&#10;                                            let message=app.$Message&#10;                                            message.error(result.message);&#10;                                        }&#10;                                    }).catch(function (error) {&#10;                                            console.log(error)&#10;                                        }&#10;                                    )&#10;                                    // 恢复状态&#10;                                    this.modal.show = false&#10;                                }&#10;                                })&#10;                        },&#10;                        // 重置表单域&#10;                        resetForm(val) {&#10;                            if (!val) {&#10;                                // 重置表单验证状态&#10;                                this.$refs.createOrUpdateForm.resetFields()&#10;                            }&#10;                        },&#10;                    },&#10;                    mounted() {&#10;                        this.getData();&#10;                    }&#10;                })&#10;    &#10;                // 页面加载完成&#10;                $(document).one('ajaxloadstart.page', function (e) {&#10;                });&#10;            })&#10;        /*]]&gt;*/&#10;&lt;/script&gt;&#10;&lt;/html&gt;" />
                    <option name="name" value="PagingView.html" />
                  </Template>
                </list>
              </option>
              <option name="name" value="ermerson" />
            </TemplateGroup>
          </value>
        </entry>
        <entry key="sdevil507">
          <value>
            <TemplateGroup>
              <option name="elementList">
                <list>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;&#10;##定义类名&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ResultDTO&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;dto&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import lombok.Data;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;ResultDTO&quot;)&#10;@Data&#10;public class $!{tableInfo.name}ResultDTO {&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(${column.comment})/**&#10;     * ${column.comment}&#10;     */#end&#10;&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;}" />
                    <option name="name" value="ResultDTO.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##引入宏定义&#10;$!define&#10;&#10;##定义类名&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ParamsDTO&quot;))&#10;&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/dto&quot;))&#10;&#10;##使用宏定义设置包后缀&#10;#setPackageSuffix(&quot;dto&quot;)&#10;&#10;##使用全局变量实现默认包导入&#10;$!autoImport&#10;import lombok.Data;&#10;&#10;##使用宏定义实现类注释信息&#10;#tableComment(&quot;ParamsDTO&quot;)&#10;@Data&#10;public class $!{tableInfo.name}ParamsDTO {&#10;#foreach($column in $tableInfo.fullColumn)&#10;    #if(${column.comment})/**&#10;     * ${column.comment}&#10;     */#end&#10;&#10;    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};&#10;#end&#10;&#10;}" />
                    <option name="name" value="ParamsDTO.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Mapper&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/mapper&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}mapper;&#10;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}PO;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ResultDTO;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ParamsDTO;&#10;import org.mapstruct.Mapper;&#10;import org.mapstruct.MappingTarget;&#10;import org.mapstruct.factory.Mappers;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.name} PO/DTO转换&#10; *&#10; * @author $!author&#10; */&#10;@Mapper&#10;public interface $!{tableName} {&#10;&#10;    $!{tableName} MAPPER = Mappers.getMapper($!{tableName}.class);&#10;    &#10;    /**&#10;     * po =&gt; dto&#10;     *&#10;     * @param po 实体类&#10;     * @return dto传输类&#10;     */&#10;    $!{tableInfo.name}ResultDTO po2dto($!{tableInfo.name}PO po);&#10;    &#10;    /**&#10;     * pos =&gt; dtos&#10;     *&#10;     * @param pos 实体类集合&#10;     * @return dtos传输类集合&#10;     */&#10;    List&lt;$!{tableInfo.name}ResultDTO&gt; pos2dtos(List&lt;$!{tableInfo.name}PO&gt; pos);&#10;    &#10;    /**&#10;     * dto =&gt; po&#10;     *&#10;     * @param dto 传输类&#10;     * @return po实体类&#10;     */&#10;    $!{tableInfo.name}PO dto2po($!{tableInfo.name}ParamsDTO dto);&#10;    &#10;    /**&#10;     * dtos =&gt; pos&#10;     *&#10;     * @param dtos 传输类集合&#10;     * @return pos实体类集合&#10;     */&#10;    List&lt;$!{tableInfo.name}PO&gt; dtos2pos(List&lt;$!{tableInfo.name}ParamsDTO&gt; dtos);&#10;    &#10;    /**&#10;     * 使用dto更新po&#10;     * &#10;     * @param dto 传输类&#10;     * @param po  实体类&#10;     */&#10;    void updatePoFromDto($!{tableInfo.name}ParamsDTO dto, @MappingTarget $!{tableInfo.name}PO po);&#10;}" />
                    <option name="name" value="Mapper.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Repository&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/repository&quot;))&#10;&#10;##拿到主键&#10;#if(!$tableInfo.pkColumn.isEmpty())&#10;    #set($pk = $tableInfo.pkColumn.get(0))&#10;#end&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}repository;&#10;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}PO;&#10;import me.sdevil507.supports.dsl.BaseJpaDslRepository;&#10;&#10;/**&#10; * $!{tableInfo.name}数据库访问层&#10; *&#10; * @author $!author&#10; */&#10;public interface $!{tableName} extends BaseJpaDslRepository&lt;$!{tableInfo.name}PO, String&gt;{&#10;&#10;}" />
                    <option name="name" value="Repository.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Service&quot;))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;&#10;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}PO;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ParamsDTO;&#10;import org.springframework.data.domain.Page;&#10;import me.sdevil507.supports.jpa.SortParamsDTO;&#10;import me.sdevil507.supports.jpa.PageParamsDTO;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableInfo.name}Service&#10; *&#10; * @author $!author&#10; */&#10;public interface $!{tableName} {&#10;&#10;    /**&#10;     * 查询全部记录&#10;     * @param searchParamsDTO 搜索dto&#10;     * @param sortParamsDTO 排序dto&#10;     * @return 记录列表&#10;     */&#10;    List&lt;$!{tableInfo.name}PO&gt; readAll($!{tableInfo.name}ParamsDTO searchParamsDTO, SortParamsDTO sortParamsDTO);&#10;&#10;    /**&#10;     * 分页获取记录&#10;     *&#10;     * @param searchParamsDTO 查询DTO&#10;     * @param pageParamsDTO 分页DTO&#10;     * @param sortParamsDTO 排序DTO&#10;     * @return 分页记录&#10;     */&#10;    Page&lt;$!{tableInfo.name}PO&gt; readAllByPage($!{tableInfo.name}ParamsDTO searchParamsDTO, PageParamsDTO pageParamsDTO, SortParamsDTO sortParamsDTO);&#10;&#10;    /**&#10;     * 创建记录&#10;     *&#10;     * @param dto 传输类&#10;     */&#10;    void create($!{tableInfo.name}ParamsDTO dto);&#10;    &#10;    /**&#10;     * 更新记录&#10;     *&#10;     * @param dto 传输类&#10;     */&#10;    void update($!{tableInfo.name}ParamsDTO dto);&#10;    &#10;    /**&#10;     * 删除记录&#10;     *&#10;     * @param dto 传输类&#10;     */&#10;    void delete($!{tableInfo.name}ParamsDTO dto);&#10;}" />
                    <option name="name" value="Service.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;ServiceImpl&quot;))&#10;#set($repositoryName=$tool.append($!tool.firstLowerCase($!{tableInfo.name}),'Repository'))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/service/impl&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;&#10;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}PO;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ParamsDTO;&#10;import $!{tableInfo.savePackageName}.repository.$!{tableInfo.name}Repository;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import org.springframework.data.domain.Page;&#10;import me.sdevil507.supports.jpa.PageParamsDTO;&#10;import com.querydsl.core.types.Predicate;&#10;import me.sdevil507.biz.card.po.Q$!{tableInfo.name}PO;&#10;import me.sdevil507.supports.jpa.SortParamsDTO;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;&#10;import org.springframework.stereotype.Service;&#10;import com.google.common.collect.Lists;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.data.domain.Pageable;&#10;&#10;import javax.annotation.Resource;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableName}&#10; *&#10; * @author $!author&#10; */&#10;@Service&#10;public class $!{tableName} implements $!{tableInfo.name}Service {&#10;&#10;    @Resource&#10;    private $!{tableInfo.name}Repository $!{repositoryName};&#10;&#10;    @Override&#10;    public List&lt;$!{tableInfo.name}PO&gt; readAll($!{tableInfo.name}ParamsDTO searchParamsDTO, SortParamsDTO sortParamsDTO){&#10;        Q$!{tableInfo.name}PO q$!{tableInfo.name}PO = Q$!{tableInfo.name}PO.$!tool.firstLowerCase($!{tableInfo.name})PO;&#10;        &#10;        // 开启谓语查询条件&#10;        Predicate predicate = q$!{tableInfo.name}PO.id.isNotNull();&#10;        &#10;        // TODO&#10;        // 进行搜索条件的选取加入&#10;        // demo:&#10;        // String name=searchParamsDTO.getName();&#10;        // if(!StringUtils.isEmpty(name)){&#10;        //     predicate = ExpressionUtils.and(predicate, q$!{tableInfo.name}PO.name.like(&quot;%&quot; + name + &quot;%&quot;));&#10;        // }&#10;     &#10;        // 排序&#10;        Sort sort = sortParamsDTO.getSort();&#10;        if (null == sort) {&#10;            // TODO&#10;            // 如果未给定初始排序顺序，则自行增加&#10;            // demo:&#10;            // sort = new Sort(new Sort.Order(Sort.Direction.DESC, &quot;createdDate&quot;));&#10;        }&#10;        &#10;        // 执行Iterable转换List&#10;        List&lt;$!{tableInfo.name}PO&gt; list = Lists.newArrayList($!{repositoryName}.findAll(predicate, sort).iterator());&#10;        return list;&#10;    }&#10;    &#10;    @Override&#10;    public Page&lt;$!{tableInfo.name}PO&gt; readAllByPage($!{tableInfo.name}ParamsDTO searchParamsDTO, PageParamsDTO pageParamsDTO, SortParamsDTO sortParamsDTO){&#10;        Q$!{tableInfo.name}PO q$!{tableInfo.name}PO = Q$!{tableInfo.name}PO.$!tool.firstLowerCase($!{tableInfo.name})PO;&#10;        &#10;        // 开启谓语查询条件&#10;        Predicate predicate = q$!{tableInfo.name}PO.id.isNotNull();&#10;        &#10;        // TODO&#10;        // 进行搜索条件的选取加入&#10;        // demo:&#10;        // String name=searchParamsDTO.getName();&#10;        // if(!StringUtils.isEmpty(name)){&#10;        //     predicate = ExpressionUtils.and(predicate, q$!{tableInfo.name}PO.name.like(&quot;%&quot; + name + &quot;%&quot;));&#10;        // }&#10;     &#10;        // 排序&#10;        Sort sort = sortParamsDTO.getSort();&#10;        if (null == sort) {&#10;            // TODO&#10;            // 如果未给定初始排序顺序，则自行增加&#10;            // demo:&#10;            // sort = new Sort(new Sort.Order(Sort.Direction.DESC, &quot;createdDate&quot;));&#10;        }&#10;        &#10;        // 执行返回&#10;        Pageable pageable = pageParamsDTO.getPageableWithSort(sort);&#10;        return $!{repositoryName}.findAll(predicate, pageable);&#10;    }&#10;    &#10;    @Override&#10;    public void create($!{tableInfo.name}ParamsDTO dto){&#10;        $!{repositoryName}.save($!{tableInfo.name}Mapper.MAPPER.dto2po(dto));&#10;    }&#10;    &#10;    @Override&#10;    public void update($!{tableInfo.name}ParamsDTO dto) {&#10;        $!{tableInfo.name}PO po = $!{repositoryName}.findOne(dto.getId());&#10;        $!{tableInfo.name}Mapper.MAPPER.updatePoFromDto(dto, po);&#10;        $!{repositoryName}.save(po);&#10;    }&#10;    &#10;    @Override&#10;    public void delete($!{tableInfo.name}ParamsDTO dto) {&#10;        $!{repositoryName}.delete(dto.getId());&#10;    }&#10;    &#10;}" />
                    <option name="name" value="ServiceImpl.java" />
                  </Template>
                  <Template>
                    <option name="code" value="##定义初始变量&#10;#set($tableName = $tool.append($tableInfo.name, &quot;Controller&quot;))&#10;#set($serviceName=$tool.append($!tool.firstLowerCase($!{tableInfo.name}),'Service'))&#10;##设置回调&#10;$!callback.setFileName($tool.append($tableName, &quot;.java&quot;))&#10;$!callback.setSavePath($tool.append($tableInfo.savePath, &quot;/controller&quot;))&#10;&#10;#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;&#10;&#10;import $!{tableInfo.savePackageName}.po.$!{tableInfo.name}PO;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ResultDTO;&#10;import $!{tableInfo.savePackageName}.dto.$!{tableInfo.name}ParamsDTO;&#10;import $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;&#10;import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;&#10;import me.sdevil507.supports.jpa.*;&#10;import me.sdevil507.supports.result.ApiResultDTO;&#10;import me.sdevil507.supports.result.ApiResultGenerator;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.apache.shiro.authz.annotation.RequiresPermissions;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.stereotype.Controller;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.servlet.ModelAndView;&#10;import java.util.List;&#10;&#10;/**&#10; * $!{tableName}&#10; *&#10; * @author $!author&#10; */&#10;@Controller&#10;@RequestMapping(TODO)&#10;@Slf4j&#10;public class $!{tableName} {&#10;    &#10;    @Autowired&#10;    private $!{tableInfo.name}Service $!{serviceName};&#10;&#10;    /**&#10;     * 对应界面展示&#10;     *&#10;     * @return 页面&#10;     */&#10;    @RequiresPermissions(TODO)&#10;    @RequestMapping(method = RequestMethod.GET)&#10;    public ModelAndView view() {&#10;        return new ModelAndView(TODO);&#10;    }&#10;    &#10;    /**&#10;     * 获取全部信息列表&#10;     *&#10;     * @param searchDTO     查询参数&#10;     * @param sortParamsDTO 排序参数&#10;     * @return 信息列表&#10;     */&#10;    @RequiresPermissions(TODO)&#10;    @RequestMapping(value = &quot;/readAll&quot;, method = RequestMethod.GET)&#10;    @ResponseBody&#10;    public ApiResultDTO readAll($!{tableInfo.name}ParamsDTO searchDTO, SortParamsDTO sortParamsDTO) {&#10;        ApiResultDTO apiResultDTO;&#10;        try {&#10;            List&lt;$!{tableInfo.name}ResultDTO&gt; list = $!{tableInfo.name}Mapper.MAPPER.pos2dtos($!{serviceName}.readAll(searchDTO, sortParamsDTO));&#10;            apiResultDTO = ApiResultGenerator.create(0, &quot;获取信息列表成功!&quot;, list);&#10;        } catch (Exception e) {&#10;            log.error(&quot;获取信息列表失败:{}&quot;, e);&#10;            apiResultDTO = ApiResultGenerator.create(-1, &quot;获取信息列表失败!&quot;);&#10;        }&#10;        return apiResultDTO;&#10;    }&#10;    &#10;    /**&#10;     * 分页获取信息列表&#10;     *&#10;     * @param searchDTO 查询参数&#10;     * @param pageParamsDTO 分页参数&#10;     * @param sortParamsDTO 排序参数&#10;     * @return 分页数据&#10;     */&#10;    @RequiresPermissions(TODO)&#10;    @RequestMapping(value = &quot;/readAllByPage&quot;, method = RequestMethod.GET)&#10;    @ResponseBody&#10;    public ApiResultDTO readAllByPage($!{tableInfo.name}ParamsDTO searchDTO, PageParamsDTO pageParamsDTO, SortParamsDTO sortParamsDTO) {&#10;        ApiResultDTO apiResultDTO;&#10;        try {&#10;            Page&lt;$!{tableInfo.name}PO&gt; pagePos = $!{serviceName}.readAllByPage(searchDTO, pageParamsDTO, sortParamsDTO);&#10;            PageResultDTO&lt;$!{tableInfo.name}ResultDTO&gt; pageResultDTO = PageResultGenerator.convert(pagePos, new PageConvertCallBack&lt;$!{tableInfo.name}ResultDTO, $!{tableInfo.name}PO&gt;() {&#10;                @Override&#10;                public List&lt;$!{tableInfo.name}ResultDTO&gt; exec(List&lt;$!{tableInfo.name}PO&gt; list) {&#10;                    return $!{tableInfo.name}Mapper.MAPPER.pos2dtos(list);&#10;                }&#10;            });&#10;            apiResultDTO = ApiResultGenerator.create(0, &quot;分页数据获取成功!&quot;, pageResultDTO);&#10;        } catch (Exception e) {&#10;            log.error(&quot;分页数据获取失败:{}&quot;, e);&#10;            apiResultDTO = ApiResultGenerator.create(-1, &quot;分页数据获取失败!&quot;);&#10;        }&#10;        return apiResultDTO;&#10;    }&#10;    &#10;    /**&#10;     * 创建&#10;     *&#10;     * @param dto 传输类&#10;     * @return 执行反馈&#10;     */&#10;    @RequiresPermissions(TODO)&#10;    @RequestMapping(value = &quot;/create&quot;, method = RequestMethod.POST)&#10;    @ResponseBody&#10;    public ApiResultDTO create($!{tableInfo.name}ParamsDTO dto) {&#10;        ApiResultDTO apiResultDTO;&#10;        try {&#10;            $!{serviceName}.create(dto);&#10;            apiResultDTO = ApiResultGenerator.create(0, &quot;创建记录成功!&quot;);&#10;        } catch (Exception e) {&#10;            log.error(&quot;创建记录失败:{}&quot;, e);&#10;            apiResultDTO = ApiResultGenerator.create(-1, &quot;创建记录失败!&quot;);&#10;        }&#10;        return apiResultDTO;&#10;    }&#10;    &#10;    /**&#10;     * 更新&#10;     *&#10;     * @param dto 传输类&#10;     * @return 执行反馈&#10;     */&#10;    @RequiresPermissions(TODO)&#10;    @RequestMapping(value = &quot;/update&quot;, method = RequestMethod.POST)&#10;    @ResponseBody&#10;    public ApiResultDTO update($!{tableInfo.name}ParamsDTO dto) {&#10;        ApiResultDTO apiResultDTO;&#10;        try {&#10;            $!{serviceName}.update(dto);&#10;            apiResultDTO = ApiResultGenerator.create(0, &quot;更新记录成功!&quot;);&#10;        } catch (Exception e) {&#10;            log.error(&quot;更新记录失败:{}&quot;, e);&#10;            apiResultDTO = ApiResultGenerator.create(-1, &quot;更新记录失败!&quot;);&#10;        }&#10;        return apiResultDTO;&#10;    }&#10;&#10;    /**&#10;     * 删除&#10;     *&#10;     * @param dto 传输类&#10;     * @return 执行反馈&#10;     */&#10;    @RequiresPermissions(TODO)&#10;    @RequestMapping(value = &quot;/delete&quot;, method = RequestMethod.POST)&#10;    @ResponseBody&#10;    public ApiResultDTO delete($!{tableInfo.name}ParamsDTO dto) {&#10;        ApiResultDTO apiResultDTO;&#10;        try {&#10;            $!{serviceName}.delete(dto);&#10;            apiResultDTO = ApiResultGenerator.create(0, &quot;删除记录成功!&quot;);&#10;        } catch (Exception e) {&#10;            log.error(&quot;删除记录失败:{}&quot;, e);&#10;            apiResultDTO = ApiResultGenerator.create(-1, &quot;删除记录失败!&quot;);&#10;        }&#10;        return apiResultDTO;&#10;    }&#10;}" />
                    <option name="name" value="Controller.java" />
                  </Template>
                </list>
              </option>
              <option name="name" value="sdevil507" />
            </TemplateGroup>
          </value>
        </entry>
      </map>
    </option>
    <option name="typeMapperGroupMap">
      <map>
        <entry key="Default">
          <value>
            <TypeMapperGroup>
              <option name="elementList">
                <list>
                  <TypeMapper>
                    <option name="columnType" value="varchar(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="char(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="text" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Double" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+,\d+\))?" />
                    <option name="javaType" value="java.lang.Double" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="integer" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int4" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int8" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="bigint(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="datetime" />
                    <option name="javaType" value="java.util.Date" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="timestamp" />
                    <option name="javaType" value="java.util.Date" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="boolean" />
                    <option name="javaType" value="java.lang.Boolean" />
                  </TypeMapper>
                </list>
              </option>
              <option name="name" value="Default" />
            </TypeMapperGroup>
          </value>
        </entry>
        <entry key="sdevil507">
          <value>
            <TypeMapperGroup>
              <option name="elementList">
                <list>
                  <TypeMapper>
                    <option name="columnType" value="varchar(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="char(\(\d+\))?" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="text" />
                    <option name="javaType" value="java.lang.String" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Double" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="decimal(\(\d+,\d+\))?" />
                    <option name="javaType" value="java.lang.Double" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="integer" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int4" />
                    <option name="javaType" value="java.lang.Integer" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="int8" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="bigint(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Long" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="datetime" />
                    <option name="javaType" value="java.util.Date" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="timestamp" />
                    <option name="javaType" value="java.util.Date" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="boolean" />
                    <option name="javaType" value="java.lang.Boolean" />
                  </TypeMapper>
                  <TypeMapper>
                    <option name="columnType" value="bit(\(\d+\))?" />
                    <option name="javaType" value="java.lang.Boolean" />
                  </TypeMapper>
                </list>
              </option>
              <option name="name" value="sdevil507" />
            </TypeMapperGroup>
          </value>
        </entry>
      </map>
    </option>
  </component>
</application>